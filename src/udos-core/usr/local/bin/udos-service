#!/bin/bash\n# uDESK service management system with markdown configurations\n# Integrates with TinyCore's service model\n\nROLE=$(udos-detect-role)\nSERVICE_DIR=\"/usr/local/etc/init.d\"\nUDOS_SERVICE_DIR=\"/etc/udos/services\"\n\n# Ensure service directory exists\nmkdir -p \"$UDOS_SERVICE_DIR\"\n\nshow_help() {\n    cat << 'EOF'\n# uDESK Service Management\n\n## Usage\n```bash\nudos-service <command> [service-name]\n```\n\n## Commands\n\n- **list** - Show available services for current role\n- **start** <service> - Start a service\n- **stop** <service> - Stop a service  \n- **status** <service> - Check service status\n- **enable** <service> - Enable service at boot\n- **disable** <service> - Disable service at boot\n- **info** <service> - Show service documentation\n- **create** <service> - Create new service from template\n\n## Examples\n\n```bash\n# List services available to current role\nudos-service list\n\n# Start SSH daemon (standard/admin roles)\nudos-service start sshd\n\n# View service documentation\nudos-service info nginx\n\n# Create custom service\nudos-service create my-web-server\n```\n\n## Service Files\n\nServices are defined in markdown format at:\n- `/etc/udos/services/<service>.md` - Service documentation\n- `/usr/local/etc/init.d/<service>` - Service script\n\n*All service management in uDESK is transparent and human-readable.*\nEOF\n}\n\nlist_services() {\n    echo \"Available services for role: $ROLE\"\n    echo \"\"\n    \n    # Find all service markdown files\n    if [ -d \"$UDOS_SERVICE_DIR\" ]; then\n        for service_md in \"$UDOS_SERVICE_DIR\"/*.md; do\n            if [ -f \"$service_md\" ]; then\n                service_name=$(basename \"$service_md\" .md)\n                \n                # Check if service is allowed for current role\n                if check_service_permission \"$service_name\"; then\n                    # Get service status\n                    local status=\"stopped\"\n                    if [ -f \"$SERVICE_DIR/$service_name\" ]; then\n                        if \"$SERVICE_DIR/$service_name\" status >/dev/null 2>&1; then\n                            status=\"running\"\n                        fi\n                    fi\n                    \n                    # Get description from markdown\n                    local desc=$(grep -m1 '^## Description' \"$service_md\" -A1 | tail -1 | sed 's/^[[:space:]]*//')\n                    echo \"- **$service_name** ($status): ${desc:-\"No description\"}\"\n                fi\n            fi\n        done\n    else\n        echo \"No services directory found at $UDOS_SERVICE_DIR\"\n    fi\n    \n    # Also show traditional TinyCore services that are role-appropriate\n    echo \"\"\n    echo \"System services:\"\n    if [ -d \"$SERVICE_DIR\" ]; then\n        for service in \"$SERVICE_DIR\"/*; do\n            if [ -x \"$service\" ] && [ ! -f \"$UDOS_SERVICE_DIR/$(basename \"$service\").md\" ]; then\n                service_name=$(basename \"$service\")\n                if check_service_permission \"$service_name\"; then\n                    echo \"- **$service_name**: Traditional TinyCore service\"\n                fi\n            fi\n        done\n    fi\n}\n\ncheck_service_permission() {\n    local service=$1\n    \n    case \"$ROLE\" in\n        \"admin\")\n            return 0  # Admin can manage all services\n            ;;\n        \"standard\")\n            # Standard role can manage user services\n            case \"$service\" in\n                \"sshd\"|\"nginx\"|\"web-server\"|\"user-\"*)\n                    return 0\n                    ;;\n                *)\n                    return 1\n                    ;;\n            esac\n            ;;\n        \"basic\")\n            # Basic role cannot manage services\n            return 1\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\nmanage_service() {\n    local action=$1\n    local service=$2\n    \n    if [ -z \"$service\" ]; then\n        echo \"Error: Service name required\"\n        echo \"Usage: udos-service $action <service-name>\"\n        return 1\n    fi\n    \n    # Check permissions\n    if ! check_service_permission \"$service\"; then\n        echo \"Error: Role '$ROLE' cannot manage service '$service'\"\n        echo \"Required role: standard or admin\"\n        return 1\n    fi\n    \n    # Look for service script\n    local service_script=\"$SERVICE_DIR/$service\"\n    if [ ! -f \"$service_script\" ]; then\n        echo \"Error: Service '$service' not found\"\n        echo \"Available services: $(basename -s .md \"$UDOS_SERVICE_DIR\"/*.md 2>/dev/null | tr '\\n' ' ')\"\n        return 1\n    fi\n    \n    # Execute service action\n    echo \"${action^}ing service: $service\"\n    if [ -x \"$service_script\" ]; then\n        \"$service_script\" \"$action\"\n    else\n        echo \"Error: Service script not executable: $service_script\"\n        return 1\n    fi\n}\n\nshow_service_info() {\n    local service=$1\n    local service_md=\"$UDOS_SERVICE_DIR/$service.md\"\n    \n    if [ -f \"$service_md\" ]; then\n        if command -v glow >/dev/null 2>&1; then\n            glow \"$service_md\"\n        else\n            cat \"$service_md\"\n        fi\n    else\n        echo \"No documentation found for service: $service\"\n        echo \"Service script: $SERVICE_DIR/$service\"\n        \n        # Try to get basic info from script\n        if [ -f \"$SERVICE_DIR/$service\" ]; then\n            echo \"\"\n            echo \"Basic service information:\"\n            grep -E '^#.*' \"$SERVICE_DIR/$service\" | head -5\n        fi\n    fi\n}\n\ncreate_service() {\n    local service=$1\n    \n    if [ \"$ROLE\" != \"admin\" ]; then\n        echo \"Error: Creating services requires admin role\"\n        return 1\n    fi\n    \n    if [ -z \"$service\" ]; then\n        echo \"Error: Service name required\"\n        return 1\n    fi\n    \n    local service_md=\"$UDOS_SERVICE_DIR/$service.md\"\n    local service_script=\"$SERVICE_DIR/$service\"\n    \n    # Create service documentation template\n    cat > \"$service_md\" << EOF\n# $service Service\n\n## Description\n\nCustom service created for uDESK.\n\n## Configuration\n\n- **Port**: 8080\n- **Log file**: /var/log/$service.log\n- **PID file**: /var/run/$service.pid\n\n## Commands\n\n\\`\\`\\`bash\n# Start service\nudos-service start $service\n\n# Check status\nudos-service status $service\n\n# View logs\ntail -f /var/log/$service.log\n\\`\\`\\`\n\n## Role Requirements\n\n- **Start/Stop**: standard or admin\n- **Configure**: admin only\n- **View logs**: standard or admin\n\n## Notes\n\nEdit this file to document your service:\n\\`\\`\\`bash\nmicro $service_md\n\\`\\`\\`\n\n*Created: $(date)*\nEOF\n    \n    # Create basic service script template\n    cat > \"$service_script\" << EOF\n#!/bin/bash\n# $service - Custom uDESK service\n# Generated: $(date)\n\nSERVICE_NAME=\"$service\"\nPID_FILE=\"/var/run/\\$SERVICE_NAME.pid\"\nLOG_FILE=\"/var/log/\\$SERVICE_NAME.log\"\n\nstart() {\n    echo \"Starting \\$SERVICE_NAME...\"\n    # Add your service start logic here\n    echo \"\\$(date): Service \\$SERVICE_NAME started\" >> \"\\$LOG_FILE\"\n    echo \"\\$\\$\" > \"\\$PID_FILE\"\n    echo \"Service \\$SERVICE_NAME started (PID: \\$\\$)\"\n}\n\nstop() {\n    echo \"Stopping \\$SERVICE_NAME...\"\n    if [ -f \"\\$PID_FILE\" ]; then\n        PID=\\$(cat \"\\$PID_FILE\")\n        kill \"\\$PID\" 2>/dev/null\n        rm -f \"\\$PID_FILE\"\n        echo \"\\$(date): Service \\$SERVICE_NAME stopped\" >> \"\\$LOG_FILE\"\n        echo \"Service \\$SERVICE_NAME stopped\"\n    else\n        echo \"Service \\$SERVICE_NAME not running\"\n    fi\n}\n\nstatus() {\n    if [ -f \"\\$PID_FILE\" ]; then\n        PID=\\$(cat \"\\$PID_FILE\")\n        if kill -0 \"\\$PID\" 2>/dev/null; then\n            echo \"Service \\$SERVICE_NAME is running (PID: \\$PID)\"\n            return 0\n        else\n            echo \"Service \\$SERVICE_NAME is not running (stale PID file)\"\n            rm -f \"\\$PID_FILE\"\n            return 1\n        fi\n    else\n        echo \"Service \\$SERVICE_NAME is not running\"\n        return 1\n    fi\n}\n\ncase \"\\$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    restart)\n        stop\n        sleep 1\n        start\n        ;;\n    status)\n        status\n        ;;\n    *)\n        echo \"Usage: \\$0 {start|stop|restart|status}\"\n        exit 1\n        ;;\nesac\nEOF\n    \n    chmod +x \"$service_script\"\n    \n    echo \"âœ“ Service created: $service\"\n    echo \"Documentation: $service_md\"\n    echo \"Script: $service_script\"\n    echo \"\"\n    echo \"Edit the service:\"\n    echo \"  micro $service_md\"\n    echo \"  micro $service_script\"\n}\n\n# Main command handling\ncase \"$1\" in\n    \"list\")\n        list_services\n        ;;\n    \"start\"|\"stop\"|\"restart\"|\"status\")\n        manage_service \"$1\" \"$2\"\n        ;;\n    \"info\")\n        if [ -z \"$2\" ]; then\n            echo \"Usage: udos-service info <service-name>\"\n            exit 1\n        fi\n        show_service_info \"$2\"\n        ;;\n    \"create\")\n        if [ -z \"$2\" ]; then\n            echo \"Usage: udos-service create <service-name>\"\n            exit 1\n        fi\n        create_service \"$2\"\n        ;;\n    \"help\"|\"--help\"|\"\")\n        show_help | if command -v glow >/dev/null 2>&1; then glow; else cat; fi\n        ;;\n    *)\n        echo \"Unknown command: $1\"\n        echo \"Run 'udos-service help' for usage information\"\n        exit 1\n        ;;\nesac\n