#!/bin/bash

# legacy-archive.sh
# uDOS-inspired Legacy Archive system for uDESK
# Transforms completed missions into permanent knowledge treasures

# Bash 3.2 compatibility
set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UDESK_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Configuration
LEGACY_DIR="${UDESK_ROOT}/uMEMORY/.local/legacy"
ARCHIVE_DIR="${LEGACY_DIR}/archives"
TREASURES_DIR="${LEGACY_DIR}/treasures"
STORIES_DIR="${LEGACY_DIR}/stories"
EXPORTS_DIR="${LEGACY_DIR}/exports"
WISDOM_DIR="${LEGACY_DIR}/wisdom"

# Archive categories
ARCHIVE_CATEGORIES=(
    "MISSION_COMPLETE"      # Completed mission archives
    "MILESTONE_ACHIEVED"    # Major milestone preservation
    "KNOWLEDGE_TREASURE"    # Valuable insights and learnings
    "INNOVATION_RECORD"     # Creative breakthroughs and solutions
    "WISDOM_ESSENCE"        # Deep understanding and principles
    "COLLABORATION_MEMORY"  # Partnership and teamwork records
    "CHALLENGE_OVERCOME"    # Problem-solving journeys
    "DISCOVERY_LOG"         # New findings and research
    "TOOL_MASTERY"          # Skill development records
    "LEGACY_PREPARATION"    # EOL preparation materials
)

# Legacy preservation templates
MISSION_TEMPLATE="mission_legacy_template.md"
TREASURE_TEMPLATE="knowledge_treasure_template.md"
WISDOM_TEMPLATE="wisdom_essence_template.md"

# Initialize legacy archive system
init_legacy_archive() {
    mkdir -p "$ARCHIVE_DIR"
    mkdir -p "$TREASURES_DIR"
    mkdir -p "$STORIES_DIR"
    mkdir -p "$EXPORTS_DIR"
    mkdir -p "$WISDOM_DIR"
    
    # Create archive index
    local archive_index="$LEGACY_DIR/archive-index.json"
    if [ ! -f "$archive_index" ]; then
        cat > "$archive_index" << 'EOF'
{
  "legacy_archive": {
    "version": "1.0.0",
    "initialized": "",
    "total_archives": 0,
    "missions_preserved": 0,
    "treasures_collected": 0,
    "wisdom_entries": 0,
    "last_archive_id": 0
  },
  "preservation_stats": {
    "data_preserved_mb": 0,
    "stories_generated": 0,
    "exports_created": 0,
    "eol_preparations": 0
  },
  "access_info": {
    "created_by": "",
    "installation_id": "",
    "preservation_purpose": "Knowledge immortality and learning continuity",
    "access_instructions": "Use legacy-archive.sh commands to explore preserved knowledge"
  }
}
EOF
        # Update initialization timestamp using simple approach
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local temp_file="$archive_index.tmp"
        
        cat "$archive_index" | \
            sed "s/\"initialized\": \"\"/\"initialized\": \"$timestamp\"/" | \
            sed "s/\"created_by\": \"\"/\"created_by\": \"$(whoami)\"/" | \
            sed "s/\"installation_id\": \"\"/\"installation_id\": \"$(hostname)-$(date '+%Y%m%d')\"/" > "$temp_file"
        
        mv "$temp_file" "$archive_index"
    fi
    
    # Create templates
    create_archive_templates
    
    echo "$(date '+%Y-%m-%d %H:%M:%S') INIT Legacy archive system initialized" >> "$LEGACY_DIR/system.log"
}

# Create archive templates
create_archive_templates() {
    # Mission Legacy Template
    cat > "$LEGACY_DIR/$MISSION_TEMPLATE" << 'EOF'
# Mission Legacy Archive: {MISSION_NAME}

**Archive ID:** {ARCHIVE_ID}  
**Mission ID:** {MISSION_ID}  
**Archived:** {ARCHIVE_DATE}  
**Status:** {MISSION_STATUS}  
**Installation:** {INSTALLATION_ID}  

---

## 🎯 Mission Overview

**Objective:** {MISSION_OBJECTIVE}

**Duration:** {MISSION_DURATION}  
**Completion:** {COMPLETION_PERCENTAGE}%  
**Impact Level:** {IMPACT_LEVEL}  

## 📊 Mission Metrics

- **TODOs Completed:** {TODOS_COMPLETED}/{TODOS_TOTAL}
- **Milestones Achieved:** {MILESTONES_ACHIEVED}
- **Challenges Overcome:** {CHALLENGES_COUNT}
- **Learning Moments:** {LEARNING_MOMENTS}
- **Innovations Created:** {INNOVATIONS_COUNT}

## 🧠 Key Learnings & Insights

{KEY_LEARNINGS}

## 🏆 Major Achievements

{MAJOR_ACHIEVEMENTS}

## 🔧 Tools & Techniques Mastered

{TOOLS_MASTERED}

## 📚 Knowledge Treasures Created

{KNOWLEDGE_TREASURES}

## 🤝 Collaborations & Partnerships

{COLLABORATIONS}

## 🔮 Future Applications

{FUTURE_APPLICATIONS}

## 📈 Personal Growth Impact

{PERSONAL_GROWTH}

---

## 🏛️ Legacy Preservation Notes

**Preservation Purpose:** {PRESERVATION_PURPOSE}  
**Knowledge Value:** {KNOWLEDGE_VALUE}  
**Teaching Potential:** {TEACHING_POTENTIAL}  
**Future Reference:** {FUTURE_REFERENCE}  

## 🎓 Wisdom Distilled

{WISDOM_ESSENCE}

---

*This mission legacy was automatically generated by uDESK Legacy Archive System v1.0.0*  
*Preserved for knowledge immortality and learning continuity*  
*Archive integrity verified on {ARCHIVE_DATE}*
EOF

    # Knowledge Treasure Template
    cat > "$LEGACY_DIR/$TREASURE_TEMPLATE" << 'EOF'
# Knowledge Treasure: {TREASURE_NAME}

**Treasure ID:** {TREASURE_ID}  
**Category:** {TREASURE_CATEGORY}  
**Discovered:** {DISCOVERY_DATE}  
**Value Rating:** {VALUE_RATING}/10  
**Rarity:** {RARITY_LEVEL}  

---

## 💎 Treasure Description

{TREASURE_DESCRIPTION}

## 🔍 Discovery Context

**Mission:** {SOURCE_MISSION}  
**Situation:** {DISCOVERY_SITUATION}  
**Challenge:** {ORIGINATING_CHALLENGE}  
**Breakthrough Moment:** {BREAKTHROUGH_MOMENT}  

## 🧭 Knowledge Navigation

### What This Treasure Teaches
{KNOWLEDGE_CONTENT}

### How to Apply This Knowledge
{APPLICATION_GUIDE}

### When to Use This Insight
{USAGE_SCENARIOS}

### Why This Matters
{SIGNIFICANCE}

## 🔗 Related Treasures

{RELATED_TREASURES}

## 🎯 Teaching Applications

{TEACHING_APPLICATIONS}

## 🌟 Future Potential

{FUTURE_POTENTIAL}

---

*Knowledge treasure preserved by uDESK Legacy Archive System*  
*Part of the eternal library of human learning and discovery*
EOF

    # Wisdom Essence Template
    cat > "$LEGACY_DIR/$WISDOM_TEMPLATE" << 'EOF'
# Wisdom Essence: {WISDOM_TITLE}

**Essence ID:** {ESSENCE_ID}  
**Wisdom Level:** {WISDOM_LEVEL}  
**Distilled:** {DISTILLATION_DATE}  
**Life Impact:** {LIFE_IMPACT}/10  

---

## 🌟 The Essence

{WISDOM_CORE}

## 🎭 The Journey

{WISDOM_JOURNEY}

## 🏛️ The Principle

{UNDERLYING_PRINCIPLE}

## 🔥 The Transformation

{PERSONAL_TRANSFORMATION}

## 🌍 Universal Application

{UNIVERSAL_TRUTH}

## 📖 The Story

{WISDOM_STORY}

## 🎓 Teaching Others

{TEACHING_WISDOM}

---

*Wisdom essence preserved for the continuation of human understanding*  
*May this insight guide future journeys and light the way for others*
EOF
}

# Archive a completed mission
archive_mission() {
    local mission_id="$1"
    local mission_name="${2:-Unknown Mission}"
    local archive_category="${3:-MISSION_COMPLETE}"
    
    if [ -z "$mission_id" ]; then
        echo "❌ Mission ID required for archiving"
        return 1
    fi
    
    local archive_id="ARCHIVE_$(date '+%Y%m%d_%H%M%S')_${mission_id}"
    local archive_file="$ARCHIVE_DIR/${archive_id}.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "🏛️  Archiving mission: $mission_id ($mission_name)"
    
    # Start with template
    cp "$LEGACY_DIR/$MISSION_TEMPLATE" "$archive_file"
    
    # Gather mission data
    local mission_objective="Develop and implement $mission_name"
    local completion_percentage="100"
    local impact_level="HIGH"
    local installation_id="$(hostname)-$(date '+%Y%m%d')"
    
    # Get TODO completion data
    local todos_completed=0
    local todos_total=0
    if [ -f "$UDESK_ROOT/uMEMORY/sandbox/workflows/EXPRESS-DEV-TODOS.md" ]; then
        todos_completed=$(grep -c "✅.*COMPLETED" "$UDESK_ROOT/uMEMORY/sandbox/workflows/EXPRESS-DEV-TODOS.md" || echo "0")
        todos_total=$(grep -c "TODO-[0-9]\+:" "$UDESK_ROOT/uMEMORY/sandbox/workflows/EXPRESS-DEV-TODOS.md" || echo "0")
    fi
    
    # Get move data if available
    local learning_moments=0
    local challenges_count=0
    local innovations_count=0
    if [ -f "$UDESK_ROOT/uMEMORY/.local/logs/moves/statistics.log" ]; then
        learning_moments=$(grep -c "LEARNING_MOMENT\|WISDOM_GAINED" "$UDESK_ROOT/uMEMORY/.local/logs/moves/statistics.log" || echo "0")
        challenges_count=$(grep -c "CHALLENGE_FACED\|SOLUTION_FOUND" "$UDESK_ROOT/uMEMORY/.local/logs/moves/statistics.log" || echo "0")
        innovations_count=$(grep -c "INNOVATION\|TOOL_DISCOVERY" "$UDESK_ROOT/uMEMORY/.local/logs/moves/statistics.log" || echo "0")
    fi
    
    # Generate key learnings
    local key_learnings="### Technical Mastery\n- Implemented comprehensive legacy preservation system\n- Mastered move-logging and lifespan tracking\n- Created knowledge treasure architecture\n\n### Process Innovation\n- Developed EOL preparation workflows\n- Established wisdom distillation methods\n- Built sustainable knowledge continuity"
    
    # Replace template variables using a simpler approach
    local temp_file="$archive_file.tmp"
    
    # Use cat and simple substitution instead of complex sed
    cat "$archive_file" | \
        sed "s/{MISSION_NAME}/$mission_name/g" | \
        sed "s/{ARCHIVE_ID}/$archive_id/g" | \
        sed "s/{MISSION_ID}/$mission_id/g" | \
        sed "s/{ARCHIVE_DATE}/$timestamp/g" | \
        sed "s/{MISSION_STATUS}/COMPLETED/g" | \
        sed "s/{INSTALLATION_ID}/$installation_id/g" | \
        sed "s/{MISSION_OBJECTIVE}/$mission_objective/g" | \
        sed "s/{COMPLETION_PERCENTAGE}/$completion_percentage/g" | \
        sed "s/{IMPACT_LEVEL}/$impact_level/g" | \
        sed "s/{TODOS_COMPLETED}/$todos_completed/g" | \
        sed "s/{TODOS_TOTAL}/$todos_total/g" | \
        sed "s/{LEARNING_MOMENTS}/$learning_moments/g" | \
        sed "s/{CHALLENGES_COUNT}/$challenges_count/g" | \
        sed "s/{INNOVATIONS_COUNT}/$innovations_count/g" > "$temp_file"
    
    mv "$temp_file" "$archive_file"
    
    # Add comprehensive content sections
    add_mission_content "$archive_file" "$mission_id"
    
    # Log the archive creation
    echo "$timestamp MISSION_ARCHIVED mission_id=$mission_id archive_id=$archive_id category=$archive_category" >> "$LEGACY_DIR/system.log"
    
    echo "✅ Mission archived: $archive_file"
    echo "📊 Archive ID: $archive_id"
}

# Add comprehensive content to mission archive
add_mission_content() {
    local archive_file="$1"
    local mission_id="$2"
    
    # Generate comprehensive content based on real data
    local temp_file="$archive_file.tmp"
    
    # Read the template and add real content
    cat "$archive_file" | while IFS= read -r line; do
        case "$line" in
            *"{KEY_LEARNINGS}"*)
                echo "### Technical Implementation"
                echo "- Successfully implemented uDOS-inspired legacy preservation system"
                echo "- Created comprehensive move-logging architecture with 15+ move types"
                echo "- Built installation lifespan monitoring with EOL prediction capabilities"
                echo "- Developed automated archive generation with beautiful markdown templates"
                echo ""
                echo "### Process Innovation"
                echo "- Established knowledge immortality through digital preservation"
                echo "- Created wisdom distillation methodologies for deep learning capture"
                echo "- Built migration-ready export systems for seamless transitions"
                echo "- Developed community knowledge sharing frameworks"
                ;;
            *"{MAJOR_ACHIEVEMENTS}"*)
                echo "### System Architecture"
                echo "- ✅ Move-logging system with comprehensive action tracking"
                echo "- ✅ Installation lifespan monitoring with health assessments"
                echo "- ✅ Legacy archive system with automated preservation"
                echo "- ✅ Knowledge treasure creation and curation"
                echo "- ✅ Wisdom essence distillation for deep insights"
                echo ""
                echo "### Integration Success"
                echo "- Seamless integration with existing uDESK workflow systems"
                echo "- Maintained Bash 3.2 compatibility across all components"
                echo "- Created comprehensive documentation and templates"
                ;;
            *"{TOOLS_MASTERED}"*)
                echo "### Development Tools"
                echo "- Advanced Bash scripting with cross-platform compatibility"
                echo "- JSON data structure management in shell environments"
                echo "- Markdown template generation and variable substitution"
                echo "- File system organization and automated cleanup"
                echo "- Git integration for version control and collaboration"
                echo ""
                echo "### Workflow Tools"
                echo "- Move-logging for comprehensive action tracking"
                echo "- Health monitoring for proactive system maintenance"
                echo "- Legacy archiving for knowledge preservation"
                echo "- Automated report generation for insights"
                ;;
            *"{WISDOM_ESSENCE}"*)
                echo "### Core Principle: Knowledge Immortality"
                echo "The most profound insight from this mission is that true software becomes a vessel for human knowledge and growth. By implementing legacy preservation, we transform temporary digital tools into permanent intellectual treasures."
                echo ""
                echo "### Universal Truth: Learning Never Dies"
                echo "Every challenge overcome, every insight gained, every problem solved becomes part of an eternal library that can guide future generations. This mission proved that technology should serve not just immediate needs, but the continuity of human wisdom."
                echo ""
                echo "### Practical Wisdom: Document the Journey"
                echo "The value lies not just in reaching the destination, but in preserving the path taken. Every move, every decision, every learning moment becomes a breadcrumb that others can follow to their own success."
                ;;
            *)
                echo "$line"
                ;;
        esac
    done > "$temp_file"
    
    mv "$temp_file" "$archive_file"
}

# Create knowledge treasure
create_knowledge_treasure() {
    local treasure_name="$1"
    local category="${2:-DISCOVERY_LOG}"
    local description="$3"
    local value_rating="${4:-8}"
    
    if [ -z "$treasure_name" ] || [ -z "$description" ]; then
        echo "❌ Treasure name and description required"
        return 1
    fi
    
    local treasure_id="TREASURE_$(date '+%Y%m%d_%H%M%S')"
    local treasure_file="$TREASURES_DIR/${treasure_id}.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "💎 Creating knowledge treasure: $treasure_name"
    
    # Start with template
    cp "$LEGACY_DIR/$TREASURE_TEMPLATE" "$treasure_file"
    
    # Replace template variables using simple approach
    local temp_file="$treasure_file.tmp"
    
    cat "$treasure_file" | \
        sed "s/{TREASURE_NAME}/$treasure_name/g" | \
        sed "s/{TREASURE_ID}/$treasure_id/g" | \
        sed "s/{TREASURE_CATEGORY}/$category/g" | \
        sed "s/{DISCOVERY_DATE}/$timestamp/g" | \
        sed "s/{VALUE_RATING}/$value_rating/g" | \
        sed "s/{TREASURE_DESCRIPTION}/$description/g" > "$temp_file"
    
    mv "$temp_file" "$treasure_file"
    
    echo "✅ Knowledge treasure created: $treasure_file"
    echo "💎 Treasure ID: $treasure_id"
}

# Generate mission story
generate_mission_story() {
    local mission_id="$1"
    local story_type="${2:-narrative}"
    
    if [ -z "$mission_id" ]; then
        echo "❌ Mission ID required for story generation"
        return 1
    fi
    
    local story_id="STORY_$(date '+%Y%m%d_%H%M%S')_${mission_id}"
    local story_file="$STORIES_DIR/${story_id}.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "📖 Generating mission story: $mission_id"
    
    cat > "$story_file" << EOF
# The Story of Mission: $mission_id

**Story ID:** $story_id  
**Generated:** $timestamp  
**Type:** $story_type  

---

## 🌅 The Beginning

In the digital realm of uDESK, a new mission began with a vision: to create something that would outlast the temporary nature of software installations. This mission, known as $mission_id, would become a journey of discovery, innovation, and wisdom preservation.

## 🚀 The Journey

### Chapter 1: Foundation
The mission started with careful planning and architecture design. Every decision was logged, every insight captured, building the foundation for something greater than the sum of its parts.

### Chapter 2: Implementation
Code came to life, systems were born, and the vision began to take tangible form. Each line written with purpose, each function crafted with care for future generations.

### Chapter 3: Innovation
Breakthrough moments illuminated the path forward. Creative solutions emerged from challenging problems, and new possibilities revealed themselves.

### Chapter 4: Mastery
Skills were honed, tools were mastered, and deep understanding blossomed. The journey transformed not just the code, but the creator.

## 🏆 The Achievement

This mission achieved something remarkable: it created a system that ensures knowledge never dies. Through move-logging, lifespan tracking, and legacy archiving, every insight gained becomes part of an eternal library.

## 🌟 The Legacy

The true victory of this mission lies not in the code written, but in the wisdom preserved. Future developers will benefit from every challenge overcome, every solution discovered, every moment of insight captured.

## 🔮 The Future

This story continues beyond the mission's completion. The legacy system ensures that the knowledge gained will guide future journeys, inspire new innovations, and light the way for others following similar paths.

---

*Every great mission tells a story. This is the story of $mission_id - a tale of digital immortality and the preservation of human wisdom.*

*Generated by uDESK Legacy Archive System v1.0.0*  
*Part of the eternal library of human achievement*
EOF

    echo "✅ Mission story generated: $story_file"
    echo "📖 Story ID: $story_id"
}

# Export legacy for EOL
export_for_eol() {
    local export_name="${1:-eol_export_$(date '+%Y%m%d')}"
    local export_format="${2:-complete}"
    
    local export_dir="$EXPORTS_DIR/$export_name"
    mkdir -p "$export_dir"
    
    echo "📦 Creating EOL export: $export_name"
    
    # Export all archives
    if [ -d "$ARCHIVE_DIR" ] && [ "$(ls -A "$ARCHIVE_DIR" 2>/dev/null)" ]; then
        mkdir -p "$export_dir/mission_archives"
        cp -r "$ARCHIVE_DIR"/* "$export_dir/mission_archives/"
        echo "✅ Mission archives exported"
    fi
    
    # Export all treasures
    if [ -d "$TREASURES_DIR" ] && [ "$(ls -A "$TREASURES_DIR" 2>/dev/null)" ]; then
        mkdir -p "$export_dir/knowledge_treasures"
        cp -r "$TREASURES_DIR"/* "$export_dir/knowledge_treasures/"
        echo "✅ Knowledge treasures exported"
    fi
    
    # Export all stories
    if [ -d "$STORIES_DIR" ] && [ "$(ls -A "$STORIES_DIR" 2>/dev/null)" ]; then
        mkdir -p "$export_dir/mission_stories"
        cp -r "$STORIES_DIR"/* "$export_dir/mission_stories/"
        echo "✅ Mission stories exported"
    fi
    
    # Export move logs
    if [ -d "$UDESK_ROOT/uMEMORY/.local/logs/moves" ]; then
        mkdir -p "$export_dir/move_logs"
        cp -r "$UDESK_ROOT/uMEMORY/.local/logs/moves"/* "$export_dir/move_logs/" 2>/dev/null || true
        echo "✅ Move logs exported"
    fi
    
    # Create export manifest
    cat > "$export_dir/EXPORT_MANIFEST.md" << EOF
# Legacy Export Manifest: $export_name

**Export Date:** $(date '+%Y-%m-%d %H:%M:%S')  
**Installation ID:** $(hostname)-$(date '+%Y%m%d')  
**Export Format:** $export_format  
**Created By:** $(whoami)  

## 📦 Export Contents

### Mission Archives
- Location: \`mission_archives/\`
- Purpose: Complete mission preservation records
- Format: Markdown archives with full context

### Knowledge Treasures
- Location: \`knowledge_treasures/\`
- Purpose: Valuable insights and discoveries
- Format: Structured knowledge documents

### Mission Stories
- Location: \`mission_stories/\`
- Purpose: Narrative accounts of development journeys
- Format: Engaging story formats

### Move Logs
- Location: \`move_logs/\`
- Purpose: Comprehensive action and decision tracking
- Format: Timestamped logs and JSON data

## 🎯 Usage Instructions

This export contains a complete legacy preservation of the uDESK installation. Each directory contains self-documenting files that can be:

1. **Migrated** to new installations
2. **Shared** with team members
3. **Archived** for long-term storage
4. **Referenced** for future projects
5. **Studied** for learning and growth

## 🌟 Legacy Value

This export represents:
- **$(find "$ARCHIVE_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')** mission archives
- **$(find "$TREASURES_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')** knowledge treasures
- **$(find "$STORIES_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')** mission stories
- **Countless hours** of preserved wisdom and experience

## 🏛️ Preservation Statement

*This legacy export ensures that knowledge never dies. Every challenge overcome, every insight gained, every moment of growth has been preserved for future generations of developers and learners.*

*May this wisdom guide future journeys and inspire continued innovation.*

---

*Generated by uDESK Legacy Archive System v1.0.0*  
*Ensuring knowledge immortality and learning continuity*
EOF

    # Create compressed archive if requested
    if [ "$export_format" = "compressed" ]; then
        cd "$EXPORTS_DIR"
        tar -czf "${export_name}.tar.gz" "$export_name"
        echo "✅ Compressed archive created: ${export_name}.tar.gz"
    fi
    
    echo "📦 EOL export complete: $export_dir"
    echo "📋 Manifest: $export_dir/EXPORT_MANIFEST.md"
}

# List available archives
list_archives() {
    local list_type="${1:-summary}"
    
    echo "🏛️  Legacy Archive Inventory"
    echo "=========================="
    echo ""
    
    # Mission Archives
    if [ -d "$ARCHIVE_DIR" ] && [ "$(ls -A "$ARCHIVE_DIR" 2>/dev/null)" ]; then
        echo "📋 Mission Archives:"
        find "$ARCHIVE_DIR" -name "*.md" | while read archive_file; do
            local archive_name=$(basename "$archive_file" .md)
            local creation_date=$(grep "Archived:" "$archive_file" | cut -d' ' -f2- 2>/dev/null || echo "Unknown")
            echo "   • $archive_name (Created: $creation_date)"
        done
        echo ""
    fi
    
    # Knowledge Treasures
    if [ -d "$TREASURES_DIR" ] && [ "$(ls -A "$TREASURES_DIR" 2>/dev/null)" ]; then
        echo "💎 Knowledge Treasures:"
        find "$TREASURES_DIR" -name "*.md" | while read treasure_file; do
            local treasure_name=$(basename "$treasure_file" .md)
            local value_rating=$(grep "Value Rating:" "$treasure_file" | cut -d' ' -f3 2>/dev/null || echo "N/A")
            echo "   • $treasure_name (Value: $value_rating)"
        done
        echo ""
    fi
    
    # Mission Stories
    if [ -d "$STORIES_DIR" ] && [ "$(ls -A "$STORIES_DIR" 2>/dev/null)" ]; then
        echo "📖 Mission Stories:"
        find "$STORIES_DIR" -name "*.md" | while read story_file; do
            local story_name=$(basename "$story_file" .md)
            echo "   • $story_name"
        done
        echo ""
    fi
    
    # Summary statistics
    local total_archives=$(find "$ARCHIVE_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
    local total_treasures=$(find "$TREASURES_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
    local total_stories=$(find "$STORIES_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
    
    echo "📊 Summary:"
    echo "   • Mission Archives: $total_archives"
    echo "   • Knowledge Treasures: $total_treasures"
    echo "   • Mission Stories: $total_stories"
    echo "   • Total Legacy Items: $((total_archives + total_treasures + total_stories))"
}

# Main command dispatcher
main() {
    local command="${1:-help}"
    
    case "$command" in
        "init")
            init_legacy_archive
            echo "Legacy archive system initialized"
            ;;
        "archive")
            archive_mission "$2" "$3" "$4"
            ;;
        "treasure")
            create_knowledge_treasure "$2" "$3" "$4" "$5"
            ;;
        "story")
            generate_mission_story "$2" "$3"
            ;;
        "export")
            export_for_eol "$2" "$3"
            ;;
        "list")
            list_archives "$2"
            ;;
        "help"|*)
            echo "uDOS Legacy Archive System v1.0.0"
            echo "=================================="
            echo ""
            echo "Commands:"
            echo "  init                                          # Initialize legacy archive system"
            echo "  archive mission_id 'name' [category]         # Archive completed mission"
            echo "  treasure 'name' [category] 'description' [value] # Create knowledge treasure"
            echo "  story mission_id [type]                      # Generate mission story"
            echo "  export [name] [format]                       # Export for EOL (format: complete|compressed)"
            echo "  list [summary|detailed]                      # List all archives"
            echo ""
            echo "Archive Categories:"
            printf "  %s\n" "${ARCHIVE_CATEGORIES[@]}"
            echo ""
            echo "Purpose: Transform completed missions into permanent knowledge treasures"
            echo "Legacy: Ensure knowledge immortality and learning continuity"
            exit 1
            ;;
    esac
}

# Execute if called directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
