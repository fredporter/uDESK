#!/bin/sh
# uDOS v1.1.0 - Unified Command Interface with Ecosystem Platform
# Clean, fast, modular architecture

VERSION="1.1.0"
UDOS_HOME="${UDOS_HOME:-$HOME/.udos}"
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
UDOS_ROOT="$(dirname "$SCRIPT_DIR")"
UDOS_LIB="$UDOS_ROOT/share/udos"

# Fast output
log() { echo "${2:+$2 }$1"; }
err() { echo "❌ $1" >&2; return 1; }

# Core initialization
init_udos() {
    [ ! -d "$UDOS_HOME" ] && mkdir -p "$UDOS_HOME"/{vars,data,logs,workflows,templates}
    [ ! -f "$UDOS_HOME/vars/config" ] && echo "VERSION=$VERSION" > "$UDOS_HOME/vars/config"
    [ ! -f "$UDOS_HOME/vars/role" ] && echo "TOMB" > "$UDOS_HOME/vars/role"
    help_init
}

# Fast variable system
uvar() {
    # Convert first argument to lowercase for consistent handling
    cmd=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$cmd" in
        set) 
            key="${2%%=*}"
            val="${2#*=}"
            [ "$key" = "$2" ] && err "Usage: uvar SET key=value" && return 1
            echo "$val" > "$UDOS_HOME/vars/$key" && log "Set $key=$val" "✅"
            ;;
        get) 
            [ -f "$UDOS_HOME/vars/$2" ] && cat "$UDOS_HOME/vars/$2" || err "Variable '$2' not found"
            ;;
        list) 
            [ ! -d "$UDOS_HOME/vars" ] && log "No variables set" && return
            for f in "$UDOS_HOME/vars"/*; do
                [ -f "$f" ] && echo "${f##*/}=$(cat "$f")"
            done
            ;;
        del)
            [ -f "$UDOS_HOME/vars/$2" ] && rm "$UDOS_HOME/vars/$2" && log "Deleted $2" "✅" || err "Variable '$2' not found"
            ;;
        *) 
            echo "uDOS Variable System"
            echo "Usage: uvar [SET KEY=VAL|GET KEY|LIST|DEL KEY]"
            echo "Examples:"
            echo "  uvar SET name=value"
            echo "  uvar GET name"
            echo "  uvar LIST"
            ;;
    esac
}

# Dynamic help system using uvar
help_init() {
    # Only set if not already exists - using proper uDOS capitalization
    [ ! -f "$UDOS_HOME/vars/help_var" ] && uvar set help_var="Variable system - set, get, list, delete variables"
    [ ! -f "$UDOS_HOME/vars/help_role" ] && uvar set help_role="Role detection and management system"  
    [ ! -f "$UDOS_HOME/vars/help_data" ] && uvar set help_data="Data management, backup and restore"
    [ ! -f "$UDOS_HOME/vars/help_workflow" ] && uvar set help_workflow="Workflow automation and task engine"
    [ ! -f "$UDOS_HOME/vars/help_smart" ] && uvar set help_smart="Smart pattern recognition and suggestions"
    [ ! -f "$UDOS_HOME/vars/help_templates" ] && uvar set help_templates="Template code and config generation"
    [ ! -f "$UDOS_HOME/vars/help_desktop" ] && uvar set help_desktop="Desktop window management and integration" 
    [ ! -f "$UDOS_HOME/vars/help_test" ] && uvar set help_test="System testing and validation"
    [ ! -f "$UDOS_HOME/vars/help_ecosystem" ] && uvar set help_ecosystem="Plugin management and ecosystem platform"
}

show_help() {
    cmd="${1:-main}"
    if [ "$cmd" = "main" ]; then
        echo "🌟 uDOS v$VERSION - Universal Device Operating System"
        echo ""
        echo "Quick Commands:"
        echo "  VAR, ROLE, DATA, WORKFLOW, SMART, TEMPLATES, DESKTOP, TEST, ECOSYSTEM"
        echo ""
        echo "Available Commands:"
        for f in "$UDOS_HOME/vars"/help_*; do
            [ -f "$f" ] && {
                cmdname="${f##*/help_}"
                desc="$(cat "$f")"
                printf "  %-12s %s\n" "$cmdname" "$desc"
            }
        done
        echo ""
        echo "Usage: udos [COMMAND] [OPTIONS]"
        echo "Help:  udos HELP [COMMAND]"
    else
        help_text=$(uvar get "help_$cmd" 2>/dev/null)
        if [ "$help_text" ]; then
            echo "📖 uDOS $cmd: $help_text"
            # Show module-specific help if available
            [ -f "$UDOS_LIB/udos-$cmd.js" ] && command -v node >/dev/null && {
                echo ""
                echo "Module commands:"
                node "$UDOS_LIB/udos-$cmd.js" --help 2>/dev/null || echo "  Use: udos $cmd [options]"
            }
        else
            err "No help available for '$cmd'"
            echo "Available topics: $(ls "$UDOS_HOME/vars"/help_* 2>/dev/null | sed 's/.*help_//' | tr '\n' ' ')"
        fi
    fi
}

# Fast role detection
detect_role() {
    score=0
    tools="gcc git vim curl node python make"
    
    for tool in $tools; do
        command -v "$tool" >/dev/null 2>&1 && score=$((score + 1))
    done
    
    role="GHOST"
    [ $score -ge 1 ] && role="TOMB"
    [ $score -ge 3 ] && role="DRONE" 
    [ $score -ge 5 ] && role="KNIGHT"
    [ $score -ge 7 ] && role="WIZARD"
    
    uvar set role="$role" >/dev/null
    uvar set role_score="$score" >/dev/null
    
    echo "Role: $role (tools: $score/$(($(echo $tools | wc -w))))"
}

# Modular command dispatcher
dispatch() {
    cmd="$1"; shift
    
    # Special handling for ecosystem command
    if [ "$cmd" = "ecosystem" ]; then
        if [ -f "$UDOS_LIB/ecosystem/udos-ecosystem.sh" ]; then
            UDOS_ROOT="$(dirname "$SCRIPT_DIR")" "$UDOS_LIB/ecosystem/udos-ecosystem.sh" "$@"
            return $?
        else
            echo "❌ Ecosystem module not found"
            return 1
        fi
    fi
    
    # Check for external modules first (workflow, smart, templates, etc.)
    if [ -f "$UDOS_LIB/udos-$cmd.js" ] && command -v node >/dev/null 2>&1; then
        node "$UDOS_LIB/udos-$cmd.js" "$@"
        return $?
    fi
    
    # Built-in commands
    case "$cmd" in
        var) uvar "$@" ;;
        
        role) 
            case "${1:-info}" in
                detect) detect_role ;;
                info|"") 
                    current_role=$(uvar get role 2>/dev/null || echo "UNKNOWN")
                    score=$(uvar get role_score 2>/dev/null || echo "0")
                    echo "Current role: $current_role (score: $score)"
                    ;;
                set)
                    [ -z "$2" ] && err "Usage: udos role set ROLE" && return 1
                    uvar set role="$2" >/dev/null && log "Role set to: $2" "✅"
                    ;;
                *) echo "Usage: udos role [detect|info|set ROLE]" ;;
            esac
            ;;
            
        data)
            case "${1:-list}" in
                list) 
                    if [ -d "$UDOS_HOME/data" ] && [ "$(ls -A "$UDOS_HOME/data" 2>/dev/null)" ]; then
                        echo "Data files:"
                        ls -la "$UDOS_HOME/data/"
                    else
                        echo "No data files"
                    fi
                    ;;
                backup) 
                    backup_dir="$UDOS_HOME/backups/$(date +%Y%m%d_%H%M%S)"
                    mkdir -p "$backup_dir"
                    if [ -d "$UDOS_HOME/data" ] && cp -r "$UDOS_HOME/data"/* "$backup_dir/" 2>/dev/null; then
                        log "Backup created: ${backup_dir##*/}" "✅"
                    else
                        log "Nothing to backup"
                    fi
                    ;;
                restore)
                    [ -z "$2" ] && err "Usage: udos data restore BACKUP_ID" && return 1
                    backup_dir="$UDOS_HOME/backups/$2"
                    [ ! -d "$backup_dir" ] && err "Backup '$2' not found" && return 1
                    mkdir -p "$UDOS_HOME/data"
                    cp -r "$backup_dir"/* "$UDOS_HOME/data/" && log "Restored from: $2" "✅"
                    ;;
                *) echo "Usage: udos data [list|backup|restore BACKUP_ID]" ;;
            esac
            ;;
            
        test)
            echo "🧪 Testing uDOS v$VERSION..."
            echo ""
            
            # Core tests
            [ -d "$UDOS_HOME" ] && log "Environment" "✅" || err "Environment failed"
            [ "$(uvar get role 2>/dev/null)" ] && log "Role system" "✅" || err "Role system failed"
            
            # Optional features
            command -v node >/dev/null && log "Node.js available" "✅" || log "Node.js missing (optional)"
            
            # Module availability
            echo ""
            echo "Available modules:"
            for module in "$UDOS_LIB"/udos-*.js; do
                [ -f "$module" ] && {
                    name="${module##*/udos-}"
                    name="${name%.js}"
                    log "$name module" "✅"
                }
            done
            ;;
            
        info)
            echo "🌟 uDOS v$VERSION System Information"
            echo ""
            echo "Environment: $UDOS_HOME"
            echo "Libraries:   $UDOS_LIB"
            echo "Role:        $(uvar get role 2>/dev/null || echo 'Not detected')"
            echo "Variables:   $(ls "$UDOS_HOME/vars" 2>/dev/null | wc -l | tr -d ' ') set"
            echo "Data files:  $([ -d "$UDOS_HOME/data" ] && ls "$UDOS_HOME/data" 2>/dev/null | wc -l | tr -d ' ' || echo 0)"
            echo "Backups:     $([ -d "$UDOS_HOME/backups" ] && ls "$UDOS_HOME/backups" 2>/dev/null | wc -l | tr -d ' ' || echo 0)"
            ;;
            
        help) show_help "$1" ;;
        
        version) echo "uDOS $VERSION" ;;
        
        init) 
            init_udos
            log "uDOS initialized" "✅"
            ;;
            
        "") 
            show_help
            ;;
            
        *) 
            # Check for external modules first
            module_path="$UDOS_LIB/udos-${cmd}-new.js"
            if [ -x "$module_path" ]; then
                "$module_path" "$@"
                return $?
            fi
            
            err "Unknown command: '$cmd'"
            echo ""
            echo "Available commands: var, role, data, test, info, help, version"
            if [ -d "$UDOS_LIB" ]; then
                modules=$(ls "$UDOS_LIB"/udos-*-new.js 2>/dev/null | sed 's/.*udos-//;s/-new.js$//' | tr '\n' ' ')
                [ "$modules" ] && echo "Available modules: $modules"
            fi
            return 1
            ;;
    esac
}

# Shell integration check
if [ "${0##*/}" = "udos" ] || [ "${0##*/}" = "udos-new" ]; then
    # Called as udos command
    init_udos
    dispatch "$@"
else
    # Sourced into shell - provide functions
    alias uvar='udos var'
    alias urole='udos role'
    alias udata='udos data' 
    alias utest='udos test'
    alias uinfo='udos info'
    export UDOS_ACTIVE=1
    echo "🌟 uDOS shell integration active"
fi
