#!/bin/sh
# uDOS Unified Command Interface v1.0.5
# Single entry point for all uDOS functionality on TinyCore Linux
# POSIX shell compatible

VERSION="1.0.5"
UDOS_HOME="${UDOS_HOME:-$HOME/.udos}"
UDOS_SYSTEM="/usr/local/share/udos"
UDOS_OPT="/opt/udos"

# Colors for output (POSIX compatible)
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    NC='\033[0m'
else
    RED='' GREEN='' BLUE='' YELLOW='' CYAN='' NC=''
fi

# Logging functions
log_info() { echo "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo "${RED}‚ùå $1${NC}"; }
log_warning() { echo "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

# ASCII Art Banner
show_banner() {
    cat << 'BANNER_EOF'

    ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    Universal Device Operating System v1.0.5
    TinyCore Linux Edition

BANNER_EOF
}

# Initialize uDOS environment
udos_init() {
    log_info "Initializing uDOS environment..."
    
    # Create user directories
    mkdir -p "${UDOS_HOME}/vars"
    mkdir -p "${UDOS_HOME}/data"
    mkdir -p "${UDOS_HOME}/templates"
    mkdir -p "${UDOS_HOME}/logs"
    mkdir -p "${UDOS_HOME}/projects"
    
    # Create config file
    cat > "${UDOS_HOME}/vars/config.env" << EOF
UDOS_VERSION=${VERSION}
USER_ROLE=TOMB
UDOS_GRID_SIZE=16
UDOS_INIT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
EOF
    
            # Set default role
            echo "TOMB" > "${UDOS_HOME}/vars/role"    log_success "uDOS environment initialized"
    log_info "Home directory: ${UDOS_HOME}"
}

# Variable management
udos_var() {
    case "${1:-}" in
        set)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos var set KEY=VALUE"
                return 1
            fi
            key=$(echo "$2" | cut -d'=' -f1)
            value=$(echo "$2" | cut -d'=' -f2-)
            mkdir -p "${UDOS_HOME}/vars"
            echo "$value" > "${UDOS_HOME}/vars/${key}"
            log_success "Set $key = $value"
            ;;
        get)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos var get KEY"
                return 1
            fi
            if [ -f "${UDOS_HOME}/vars/$2" ]; then
                cat "${UDOS_HOME}/vars/$2"
            else
                log_error "Variable $2 not found"
                return 1
            fi
            ;;
        list)
            echo "${BLUE}üìã uDOS Variables:${NC}"
            if [ -d "${UDOS_HOME}/vars" ]; then
                for var_file in "${UDOS_HOME}/vars"/*; do
                    if [ -f "$var_file" ]; then
                        var_name=$(basename "$var_file")
                        var_value=$(cat "$var_file")
                        echo "  $var_name = $var_value"
                    fi
                done
            else
                echo "  No variables set"
            fi
            ;;
        *)
            echo "${BLUE}uDOS Variable Management${NC}"
            echo "Display Format        Actual Command"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS VAR SET KEY=VAL  udos var set KEY=VALUE"
            echo "UDOS VAR GET KEY      udos var get KEY"
            echo "UDOS VAR LIST         udos var list"
            echo "UVAR SET KEY=VAL      uvar set KEY=VALUE"
            ;;
    esac
}

# Role detection and management
udos_role() {
    case "${1:-}" in
        detect)
            log_info "Detecting system capabilities..."
            
            role="TOMB"
            score=0
            
            # Check system capabilities
            [ -f "/usr/bin/gcc" ] && score=$((score + 10))
            [ -f "/usr/bin/git" ] && score=$((score + 5))
            [ -f "/usr/bin/vim" ] || [ -f "/usr/bin/nano" ] && score=$((score + 3))
            [ -f "/usr/bin/curl" ] && score=$((score + 2))
            [ -f "/usr/bin/wget" ] && score=$((score + 2))
            
            # Determine role based on score
            if [ $score -ge 20 ]; then
                role="WIZARD"
            elif [ $score -ge 15 ]; then
                role="SORCERER"
            elif [ $score -ge 12 ]; then
                role="KNIGHT"
            elif [ $score -ge 9 ]; then
                role="IMP"
            elif [ $score -ge 6 ]; then
                role="CRYPT"
            elif [ $score -ge 3 ]; then
                role="DRONE"
            elif [ $score -ge 1 ]; then
                role="TOMB"
            else
                role="GHOST"
            fi
            
            # Save role
            mkdir -p "${UDOS_HOME}/vars"
            echo "$role" > "${UDOS_HOME}/vars/role"
            echo "$score" > "${UDOS_HOME}/vars/role_score"
            
            echo "${GREEN}üé≠ Role Detected: $role${NC}"
            echo "Capability Score: $score"
            ;;
        info|show)
            if [ -f "${UDOS_HOME}/vars/role" ]; then
                role=$(cat "${UDOS_HOME}/vars/role")
                score=$(cat "${UDOS_HOME}/vars/role_score" 2>/dev/null || echo "Unknown")
                printf "${BLUE}üé≠ Current Role: %s${NC}\n" "$role"
                printf "Score: %s\n" "$score"
                printf "\nRole Hierarchy:\n"
                printf "  GHOST ‚Üí APPRENTICE ‚Üí SCRIBE ‚Üí SCHOLAR ‚Üí SAGE ‚Üí MASTER ‚Üí ARCHITECT ‚Üí WIZARD\n"
            else
                log_warning "No role detected. Run 'udos role detect' first."
            fi
            ;;
        *)
            printf "${BLUE}uDOS Role Management${NC}\n"
            printf "Display Format       Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS ROLE DETECT     udos role detect\n"
            printf "UDOS ROLE INFO       udos role info\n"
            printf "\n${YELLOW}Role Hierarchy:${NC}\n"
            printf "üëª GHOST ‚Üí ‚ö∞Ô∏è TOMB ‚Üí ü§ñ DRONE ‚Üí ÔøΩ CRYPT\n"
            printf "üòà IMP ‚Üí ‚öîÔ∏è KNIGHT ‚Üí üßô‚Äç‚ôÇÔ∏è SORCERER ‚Üí üßô‚Äç‚ôÄÔ∏è WIZARD\n"
            ;;
    esac
}

# Template management
udos_tpl() {
    case "${1:-}" in
        list)
            printf "${BLUE}üìÑ Available Templates:${NC}\n"
            if [ -d "${UDOS_SYSTEM}/templates" ]; then
                for tpl in "${UDOS_SYSTEM}/templates"/*.md; do
                    if [ -f "$tpl" ]; then
                        printf "  %s\n" "$(basename "$tpl" .md)"
                    fi
                done
            fi
            if [ -d "${UDOS_HOME}/templates" ]; then
                printf "\n${BLUE}üìÑ User Templates:${NC}\n"
                for tpl in "${UDOS_HOME}/templates"/*.md; do
                    if [ -f "$tpl" ]; then
                        printf "  %s (user)\n" "$(basename "$tpl" .md)"
                    fi
                done
            fi
            ;;
        create)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos tpl create TEMPLATE_NAME [OUTPUT_FILE]"
                return 1
            fi
            
            template_name="$2"
            output_file="${3:-${template_name}.md}"
            
            # Look for template
            template_file=""
            if [ -f "${UDOS_HOME}/templates/${template_name}.md" ]; then
                template_file="${UDOS_HOME}/templates/${template_name}.md"
            elif [ -f "${UDOS_SYSTEM}/templates/${template_name}.md" ]; then
                template_file="${UDOS_SYSTEM}/templates/${template_name}.md"
            else
                log_error "Template '$template_name' not found"
                return 1
            fi
            
            cp "$template_file" "$output_file"
            log_success "Created $output_file from template $template_name"
            ;;
        *)
            printf "${BLUE}uDOS Template Management${NC}\n"
            printf "Display Format         Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ         ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS TPL LIST          udos tpl list\n"
            printf "UDOS TPL CREATE NAME   udos tpl create NAME\n"
            printf "UTPL LIST              utpl list\n"
            printf "\n${YELLOW}Available Templates:${NC}\n"
            printf "  readme    Project README template\n"
            printf "  meeting   Meeting notes template\n"
            printf "  daily     Daily log template\n"
            ;;
    esac
}

# Data management
udos_data() {
    case "${1:-}" in
        list)
            printf "${BLUE}üìä uDOS Data Files:${NC}\n"
            if [ -d "${UDOS_HOME}/data" ]; then
                for data_file in "${UDOS_HOME}/data"/*; do
                    if [ -f "$data_file" ]; then
                        printf "  %s\n" "$(basename "$data_file")"
                    fi
                done
            else
                printf "  No data files found\n"
            fi
            ;;
        backup)
            backup_dir="${UDOS_HOME}/backups/$(date '+%Y%m%d_%H%M%S')"
            mkdir -p "$backup_dir"
            if [ -d "${UDOS_HOME}/data" ]; then
                cp -r "${UDOS_HOME}/data"/* "$backup_dir/" 2>/dev/null || true
                log_success "Data backed up to $backup_dir"
            else
                log_warning "No data directory to backup"
            fi
            ;;
        *)
            printf "${BLUE}uDOS Data Management${NC}\n"
            printf "Display Format      Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS DATA LIST      udos data list\n"
            printf "UDOS DATA BACKUP    udos data backup\n"
            printf "UDATA LIST          udata list\n"
            printf "UDATA BACKUP        udata backup\n"
            ;;
    esac
}

# System information
udos_info() {
    printf "${BLUE}üñ•Ô∏è  uDOS System Information${NC}\n"
    printf "Version: %s\n" "$VERSION"
    printf "Home: %s\n" "$UDOS_HOME"
    printf "System: %s\n" "$UDOS_SYSTEM"
    
    if [ -f "${UDOS_HOME}/vars/config.env" ]; then
        printf "Status: Initialized\n"
        if [ -f "${UDOS_HOME}/vars/role" ]; then
            printf "Role: %s\n" "$(cat "${UDOS_HOME}/vars/role")"
        fi
    else
        printf "Status: Not initialized (run 'udos init')\n"
    fi
    
    printf "\nSystem Resources:\n"
    printf "  Disk: %s\n" "$(df -h "$UDOS_HOME" 2>/dev/null | tail -1 | awk '{print $4 " available"}' || echo "Unknown")"
    printf "  Memory: %s\n" "$(free -h 2>/dev/null | grep Mem | awk '{print $7 " available"}' || echo "Unknown")"
}

# Test system
udos_test() {
    case "${1:-system}" in
        system|basic)
            log_info "Running uDOS system tests..."
            echo ""
            
            # Test 1: Core functionality
            echo "${BLUE}üß™ Test 1: Core Commands${NC}"
            if udos version >/dev/null 2>&1; then
                log_success "udos version - OK"
            else
                log_error "udos version - FAILED"
            fi
            
            if udos role detect >/dev/null 2>&1; then
                log_success "udos role detect - OK"
            else
                log_error "udos role detect - FAILED"
            fi
            
            # Test 2: Environment
            echo ""
            echo "${BLUE}üß™ Test 2: Environment${NC}"
            if [ -d "$UDOS_HOME" ]; then
                log_success "UDOS_HOME exists - OK"
            else
                log_error "UDOS_HOME missing - FAILED"
            fi
            
            if [ -d "$UDOS_SYSTEM" ]; then
                log_success "UDOS_SYSTEM exists - OK"
            else
                log_warning "UDOS_SYSTEM missing - Optional"
            fi
            
            # Test 3: Dependencies
            echo ""
            echo "${BLUE}üß™ Test 3: Dependencies${NC}"
            for cmd in sh bash echo printf; do
                if command -v "$cmd" >/dev/null 2>&1; then
                    log_success "$cmd available - OK"
                else
                    log_error "$cmd missing - FAILED"
                fi
            done
            
            echo ""
            log_success "System test completed"
            ;;
        m2|interface|web)
            log_info "Running M2 integration tests..."
            echo ""
            
            # Check if M2 integration exists
            M2_DIR="/tmp/uDESK/dev/m2-integration"
            if [ ! -d "$M2_DIR" ]; then
                log_warning "M2 integration not found in /tmp/uDESK"
                log_info "To run M2 tests, first clone the repository:"
                echo "  cd /tmp && git clone https://github.com/fredporter/uDESK.git"
                echo "  udos test m2"
                return 1
            fi
            
            echo "${BLUE}üß™ M2 Integration Test${NC}"
            if [ -f "$M2_DIR/test-vm.sh" ]; then
                log_success "M2 test suite found"
                log_info "Running M2 integration test..."
                if "$M2_DIR/test-vm.sh"; then
                    log_success "M2 test completed - check /tmp/udos-m2-test/"
                else
                    log_error "M2 test failed"
                fi
            else
                log_error "M2 test suite not found"
            fi
            ;;
        m3|desktop)
            log_info "Running M3 desktop integration tests..."
            echo ""
            
            echo "${BLUE}üß™ M3 Desktop Integration Test${NC}"
            
            # Test Node.js availability
            if command -v node >/dev/null 2>&1; then
                log_success "Node.js available for M3"
                
                # Test M3 window manager
                if [ -f "${UDOS_SYSTEM}/udos-m3-window.js" ]; then
                    log_success "M3 window manager found"
                    
                    log_info "Testing window detection..."
                    if node "${UDOS_SYSTEM}/udos-m3-window.js" detect >/dev/null 2>&1; then
                        log_success "M3 window detection working"
                    else
                        log_warning "M3 window detection issues (may be platform-specific)"
                    fi
                    
                    log_info "Testing M3 integration with udos command..."
                    if udos m3 test >/dev/null 2>&1; then
                        log_success "M3 command integration working"
                    else
                        log_error "M3 command integration failed"
                    fi
                else
                    log_error "M3 window manager not found at ${UDOS_SYSTEM}/udos-m3-window.js"
                fi
            else
                log_error "Node.js required for M3 functionality"
                log_info "Install Node.js to enable M3 desktop integration"
            fi
            ;;
        m4|ai|automation)
            log_info "Running M4 AI automation tests..."
            
            # Call the M4 test function
            udos_m4 test
            ;;
        quick)
            log_info "Running quick system check..."
            echo ""
            
            printf "${BLUE}üöÄ uDOS Quick Test${NC}\n"
            printf "Version: %s\n" "$(udos version 2>/dev/null || echo 'FAILED')"
            printf "Role: %s\n" "$(udos role detect 2>/dev/null || echo 'FAILED')"
            printf "Home: %s\n" "${UDOS_HOME}"
            printf "Status: %s\n" "$([ -d "$UDOS_HOME" ] && echo 'OK' || echo 'FAILED')"
            ;;
        *)
            log_info "Available test modes:"
            echo "  ${CYAN}udos test system${NC}    - Full system test"
            echo "  ${CYAN}udos test m2${NC}        - M2 integration test"
            echo "  ${CYAN}udos test m3${NC}        - M3 desktop test"
            echo "  ${CYAN}udos test quick${NC}     - Quick status check"
            ;;
    esac
}

# M3 Desktop Integration
udos_m3() {
    case "${1:-}" in
        window|windows)
            shift
            case "${1:-}" in
                detect|list)
                    log_info "Detecting windows..."
                    if command -v node >/dev/null 2>&1; then
                        node "${UDOS_SYSTEM}/udos-m3-window.js" detect
                    else
                        log_error "Node.js required for M3 window management"
                        return 1
                    fi
                    ;;
                focus)
                    if [ -n "${2:-}" ]; then
                        log_info "Focusing window: $2"
                        node "${UDOS_SYSTEM}/udos-m3-window.js" focus "$2"
                    else
                        log_error "Window ID required. Use: udos m3 window focus <id>"
                        return 1
                    fi
                    ;;
                move)
                    if [ $# -ge 6 ]; then
                        log_info "Moving window: $2"
                        node "${UDOS_SYSTEM}/udos-m3-window.js" move "$2" "$3" "$4" "$5" "$6"
                    else
                        log_error "Usage: udos m3 window move <id> <x> <y> <width> <height>"
                        return 1
                    fi
                    ;;
                *)
                    printf "${BLUE}ü™ü uDOS M3 Window Management${NC}\n"
                    printf "Display Format              Actual Command\n"
                    printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    printf "UDOS M3 WINDOW DETECT       udos m3 window detect\n"
                    printf "UDOS M3 WINDOW LIST         udos m3 window list\n"
                    printf "UDOS M3 WINDOW FOCUS ID     udos m3 window focus <id>\n"
                    printf "UDOS M3 WINDOW MOVE ID X Y W H  udos m3 window move <id> <x> <y> <w> <h>\n"
                    printf "\n${YELLOW}Examples:${NC}\n"
                    printf "  udos m3 window detect\n"
                    printf "  udos m3 window focus 0x1234567\n"
                    printf "  udos m3 window move 0x1234567 100 100 800 600\n"
                    ;;
            esac
            ;;
        test)
            log_info "Testing M3 desktop integration..."
            if command -v node >/dev/null 2>&1; then
                log_success "Node.js available for M3"
                node "${UDOS_SYSTEM}/udos-m3-window.js" detect >/dev/null 2>&1
                if [ $? -eq 0 ]; then
                    log_success "M3 window detection working"
                else
                    log_warning "M3 window detection issues"
                fi
            else
                log_error "Node.js required for M3 functionality"
                return 1
            fi
            ;;
        *)
            printf "${BLUE}üñ•Ô∏è  uDOS M3 Desktop Integration${NC}\n"
            printf "Display Format           Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ           ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS M3 WINDOW           udos m3 window\n"
            printf "UDOS M3 TEST             udos m3 test\n"
            printf "\n${YELLOW}Features:${NC}\n"
            printf "‚Ä¢ Cross-platform window management\n"
            printf "‚Ä¢ Window detection and focus\n"
            printf "‚Ä¢ Window positioning and resizing\n"
            printf "‚Ä¢ Desktop integration hooks\n"
            printf "\n${CYAN}üí° Type 'UDOS M3 WINDOW' for window commands${NC}\n"
            ;;
    esac
}

# Update system
udos_update() {
    log_info "Checking for uDOS updates..."
    
    if command -v curl >/dev/null 2>&1; then
        log_info "Downloading latest installer..."
        curl -sSL "https://raw.githubusercontent.com/fredporter/uDESK/main/vm/current/install-udos-tinycore.sh" -o "/tmp/udos-update.sh"
        chmod +x "/tmp/udos-update.sh"
        log_info "Running update..."
        exec "/tmp/udos-update.sh"
    elif command -v wget >/dev/null 2>&1; then
        log_info "Downloading latest installer..."
        wget -q "https://raw.githubusercontent.com/fredporter/uDESK/main/vm/current/install-udos-tinycore.sh" -O "/tmp/udos-update.sh"
        chmod +x "/tmp/udos-update.sh"
        log_info "Running update..."
        exec "/tmp/udos-update.sh"
    else
        log_error "Neither curl nor wget available for updates"
        return 1
    fi
}

# M4 AI Automation
udos_m4() {
    local udos_share="/usr/share/udos"
    
    case "${1:-}" in
        workflow)
            shift
            case "${1:-}" in
                list)
                    if [ -f "$udos_share/udos-m4-workflow.js" ]; then
                        log_info "Listing M4 workflows..."
                        node "$udos_share/udos-m4-workflow.js" list
                    else
                        log_error "M4 workflow engine not found"
                        return 1
                    fi
                    ;;
                create)
                    shift
                    if [ -f "$udos_share/udos-m4-workflow.js" ]; then
                        log_info "Creating M4 workflow..."
                        if [ -n "$1" ]; then
                            node "$udos_share/udos-m4-workflow.js" create "$1"
                        else
                            echo "Usage: udos m4 workflow create '<workflow-json>'"
                            echo "Example: udos m4 workflow create '{\"name\":\"Daily Backup\",\"actions\":[{\"type\":\"command\",\"command\":\"udos data backup\"}]}'"
                        fi
                    else
                        log_error "M4 workflow engine not found"
                        return 1
                    fi
                    ;;
                run|execute)
                    shift
                    if [ -f "$udos_share/udos-m4-workflow.js" ]; then
                        if [ -n "$1" ]; then
                            log_info "Executing workflow: $1"
                            node "$udos_share/udos-m4-workflow.js" execute "$1"
                        else
                            log_error "Workflow ID required"
                            return 1
                        fi
                    else
                        log_error "M4 workflow engine not found"
                        return 1
                    fi
                    ;;
                *)
                    printf "${BLUE}ü§ñ uDOS M4 Workflow Engine${NC}\n"
                    printf "Display Format                   Actual Command\n"
                    printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ                   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    printf "UDOS M4 WORKFLOW LIST            udos m4 workflow list\n"
                    printf "UDOS M4 WORKFLOW CREATE          udos m4 workflow create\n"
                    printf "UDOS M4 WORKFLOW RUN <id>        udos m4 workflow run <id>\n"
                    printf "\n${YELLOW}Examples:${NC}\n"
                    printf "  udos m4 workflow list\n"
                    printf "  udos m4 workflow create '{\"name\":\"Test\",\"actions\":[]}'\n"
                    printf "  udos m4 workflow run workflow-id\n"
                    ;;
            esac
            ;;
        ai)
            shift
            case "${1:-}" in
                learn)
                    shift
                    if [ -f "$udos_share/udos-m4-ai.js" ]; then
                        if [ -n "$1" ]; then
                            log_info "Learning from command: $1"
                            node "$udos_share/udos-m4-ai.js" learn "$1" "${2:-}"
                        else
                            log_error "Command required for learning"
                            return 1
                        fi
                    else
                        log_error "M4 AI system not found"
                        return 1
                    fi
                    ;;
                predict)
                    shift
                    if [ -f "$udos_share/udos-m4-ai.js" ]; then
                        if [ -n "$1" ]; then
                            log_info "Predicting next commands for: $1"
                            node "$udos_share/udos-m4-ai.js" predict "$1"
                        else
                            log_error "Command required for prediction"
                            return 1
                        fi
                    else
                        log_error "M4 AI system not found"
                        return 1
                    fi
                    ;;
                suggest)
                    if [ -f "$udos_share/udos-m4-ai.js" ]; then
                        log_info "Getting AI suggestions..."
                        local context="{\"workingDir\":\"$(pwd)\",\"user\":\"$USER\"}"
                        node "$udos_share/udos-m4-ai.js" suggest "$context"
                    else
                        log_error "M4 AI system not found"
                        return 1
                    fi
                    ;;
                stats)
                    if [ -f "$udos_share/udos-m4-ai.js" ]; then
                        log_info "AI pattern statistics..."
                        node "$udos_share/udos-m4-ai.js" stats
                    else
                        log_error "M4 AI system not found"
                        return 1
                    fi
                    ;;
                *)
                    printf "${BLUE}üß† uDOS M4 AI System${NC}\n"
                    printf "Display Format                   Actual Command\n"
                    printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ                   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    printf "UDOS M4 AI LEARN <cmd>           udos m4 ai learn <command>\n"
                    printf "UDOS M4 AI PREDICT <cmd>         udos m4 ai predict <command>\n"
                    printf "UDOS M4 AI SUGGEST               udos m4 ai suggest\n"
                    printf "UDOS M4 AI STATS                 udos m4 ai stats\n"
                    printf "\n${YELLOW}Examples:${NC}\n"
                    printf "  udos m4 ai learn 'udos system status'\n"
                    printf "  udos m4 ai predict 'udos data'\n"
                    printf "  udos m4 ai suggest\n"
                    ;;
            esac
            ;;
        template)
            shift
            case "${1:-}" in
                list)
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        log_info "Listing M4 templates..."
                        node "$udos_share/udos-m4-templates.js" list "${2:-}"
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                generate)
                    shift
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        if [ -n "$1" ]; then
                            log_info "Generating from template: $1"
                            node "$udos_share/udos-m4-templates.js" generate "$1" "${2:-}" "${3:-}"
                        else
                            log_error "Template ID required"
                            return 1
                        fi
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                suggest)
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        log_info "Getting template suggestions..."
                        local context="{\"workingDir\":\"$(pwd)\",\"fileName\":\"${2:-}\"}"
                        node "$udos_share/udos-m4-templates.js" suggest "$context"
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                create)
                    shift
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        if [ -n "$1" ]; then
                            log_info "Creating template..."
                            node "$udos_share/udos-m4-templates.js" create "$1"
                        else
                            echo "Usage: udos m4 template create '<template-json>'"
                            echo "Example: udos m4 template create '{\"name\":\"My Template\",\"template\":\"content\"}'"
                        fi
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                learn)
                    shift
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        if [ -n "$1" ] && [ -f "$1" ]; then
                            log_info "Learning from file: $1"
                            node "$udos_share/udos-m4-templates.js" learn "$1" "${2:-}"
                        else
                            log_error "Valid file path required"
                            return 1
                        fi
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                stats)
                    if [ -f "$udos_share/udos-m4-templates.js" ]; then
                        log_info "Template usage statistics..."
                        node "$udos_share/udos-m4-templates.js" stats
                    else
                        log_error "M4 template system not found"
                        return 1
                    fi
                    ;;
                *)
                    printf "${BLUE}üìÑ uDOS M4 Template System${NC}\n"
                    printf "Display Format                      Actual Command\n"
                    printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ                      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    printf "UDOS M4 TEMPLATE LIST               udos m4 template list\n"
                    printf "UDOS M4 TEMPLATE GENERATE <id>      udos m4 template generate <id>\n"
                    printf "UDOS M4 TEMPLATE SUGGEST            udos m4 template suggest\n"
                    printf "UDOS M4 TEMPLATE CREATE             udos m4 template create\n"
                    printf "UDOS M4 TEMPLATE LEARN <file>       udos m4 template learn <file>\n"
                    printf "UDOS M4 TEMPLATE STATS              udos m4 template stats\n"
                    printf "\n${YELLOW}Examples:${NC}\n"
                    printf "  udos m4 template list script\n"
                    printf "  udos m4 template generate bash-script\n"
                    printf "  udos m4 template suggest\n"
                    ;;
            esac
            ;;
        nlp)
            shift
            if [ -f "$udos_share/udos-m4-nlp.js" ]; then
                if [ -n "$*" ]; then
                    log_info "Processing natural language query..."
                    node "$udos_share/udos-m4-nlp.js" "$*"
                else
                    log_error "Natural language query required"
                    echo "Usage: udos m4 nlp <natural language query>"
                    echo "Example: udos m4 nlp 'backup my data and show system status'"
                fi
            else
                log_error "M4 NLP system not found"
                return 1
            fi
            ;;
        test)
            log_info "Running M4 AI automation tests..."
            
            echo "${BLUE}üß™ M4 AI Automation Test${NC}"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            # Test workflow engine
            if [ -f "$udos_share/udos-m4-workflow.js" ]; then
                echo "‚úÖ Workflow engine: Available"
                node "$udos_share/udos-m4-workflow.js" list >/dev/null 2>&1 && echo "   ‚úÖ Engine functional" || echo "   ‚ùå Engine error"
            else
                echo "‚ùå Workflow engine: Missing"
            fi
            
            # Test AI system
            if [ -f "$udos_share/udos-m4-ai.js" ]; then
                echo "‚úÖ AI system: Available"
                node "$udos_share/udos-m4-ai.js" stats >/dev/null 2>&1 && echo "   ‚úÖ AI functional" || echo "   ‚ùå AI error"
            else
                echo "‚ùå AI system: Missing"
            fi
            
            # Test template system
            if [ -f "$udos_share/udos-m4-templates.js" ]; then
                echo "‚úÖ Template system: Available"
                node "$udos_share/udos-m4-templates.js" list >/dev/null 2>&1 && echo "   ‚úÖ Templates functional" || echo "   ‚ùå Templates error"
            else
                echo "‚ùå Template system: Missing"
            fi
            
            # Test NLP
            if [ -f "$udos_share/udos-m4-nlp.js" ]; then
                echo "‚úÖ NLP system: Available"
            else
                echo "‚ùå NLP system: Missing"
            fi
            
            # Check Node.js
            if command -v node >/dev/null 2>&1; then
                echo "‚úÖ Node.js: Available ($(node --version))"
            else
                echo "‚ùå Node.js: Missing"
                log_info "Install Node.js to enable M4 AI automation"
            fi
            
            echo ""
            echo "${GREEN}M4 Test Summary:${NC}"
            echo "  ‚Ä¢ Workflow automation for task execution"
            echo "  ‚Ä¢ AI pattern recognition for smart suggestions"
            echo "  ‚Ä¢ Template generation for rapid development"
            echo "  ‚Ä¢ Natural language processing for intuitive commands"
            ;;
        *)
            printf "${BLUE}ü§ñ uDOS M4 AI Automation System${NC}\n"
            printf "Display Format              Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS M4 WORKFLOW            udos m4 workflow\n"
            printf "UDOS M4 AI                  udos m4 ai\n"
            printf "UDOS M4 TEMPLATE            udos m4 template\n"
            printf "UDOS M4 NLP <query>         udos m4 nlp <query>\n"
            printf "UDOS M4 TEST                udos m4 test\n"
            printf "\n${YELLOW}M4 Features:${NC}\n"
            printf "  workflow - AI-powered automation workflows\n"
            printf "  ai       - Intelligent pattern recognition\n"
            printf "  template - Smart code and config generation\n"
            printf "  nlp      - Natural language command processing\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos m4 ai suggest\n"
            printf "  udos m4 template list\n"
            printf "  udos m4 nlp 'backup my data'\n"
            ;;
    esac
}

# Help system
udos_help() {
    case "${1:-}" in
        var|variable|variables)
            printf "${BLUE}uDOS Variable Management${NC}\n"
            printf "Display Format    Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS VAR SET      udos var set KEY=VALUE\n"
            printf "UDOS VAR GET      udos var get KEY\n"
            printf "UDOS VAR LIST     udos var list\n"
            printf "UVAR SET          uvar set KEY=VALUE\n"
            printf "UVAR GET          uvar get KEY\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos var set TEST=hello\n"
            printf "  uvar get TEST\n"
            printf "  udos var list\n"
            ;;
        role|roles)
            printf "${BLUE}uDOS Role Management${NC}\n"
            printf "Display Format       Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS ROLE DETECT     udos role detect\n"
            printf "UDOS ROLE INFO       udos role info\n"
            printf "\n${YELLOW}Role Hierarchy:${NC}\n"
            printf "üëª GHOST ‚Üí ‚ö∞Ô∏è TOMB ‚Üí ü§ñ DRONE ‚Üí ÔøΩ CRYPT\n"
            printf "üòà IMP ‚Üí ‚öîÔ∏è KNIGHT ‚Üí üßô‚Äç‚ôÇÔ∏è SORCERER ‚Üí üßô‚Äç‚ôÄÔ∏è WIZARD\n"
            ;;
        tpl|template|templates)
            printf "${BLUE}uDOS Template Management${NC}\n"
            printf "Display Format         Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ         ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS TPL LIST          udos tpl list\n"
            printf "UDOS TPL CREATE NAME   udos tpl create NAME\n"
            printf "UTPL LIST              utpl list\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos tpl create readme\n"
            printf "  utpl list\n"
            ;;
        m3|desktop)
            printf "${BLUE}üñ•Ô∏è  uDOS M3 Desktop Integration${NC}\n"
            printf "Display Format              Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS M3 WINDOW DETECT       udos m3 window detect\n"
            printf "UDOS M3 WINDOW FOCUS ID     udos m3 window focus <id>\n"
            printf "UDOS M3 WINDOW MOVE         udos m3 window move <id> <x> <y> <w> <h>\n"
            printf "UDOS M3 TEST                udos m3 test\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos m3 window detect\n"
            printf "  udos m3 window focus 0x1234567\n"
            printf "  udos m3 window move 0x1234567 100 100 800 600\n"
            printf "  udos test m3\n"
            ;;
        data)
            printf "${BLUE}uDOS Data Management${NC}\n"
            printf "Display Format      Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS DATA LIST      udos data list\n"
            printf "UDOS DATA BACKUP    udos data backup\n"
            printf "UDATA LIST          udata list\n"
            ;;
        test|testing)
            printf "${BLUE}uDOS Testing System${NC}\n"
            printf "Display Format      Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS TEST           udos test system\n"
            printf "UDOS TEST SYSTEM    udos test system\n"
            printf "UDOS TEST M2        udos test m2\n"
            printf "UDOS TEST M3        udos test m3\n"
            printf "UDOS TEST M4        udos test m4\n"
            printf "UDOS TEST QUICK     udos test quick\n"
            printf "\n${YELLOW}Test Modes:${NC}\n"
            printf "  system  - Full system functionality test\n"
            printf "  m2      - M2 web interface integration test\n"
            printf "  m3      - M3 desktop integration test\n"
            printf "  m4      - M4 AI automation test\n"
            printf "  quick   - Quick status check\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos test          # System test\n"
            printf "  udos test m2       # M2 integration test\n"
            printf "  udos test quick    # Quick check\n"
            ;;
        *)
            show_banner
            echo "${CYAN}Available Commands:${NC}"
            echo ""
            echo "${YELLOW}Display Format              Actual Command${NC}"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS INIT                   udos init"
            echo "UDOS INFO                   udos info"
            echo "UDOS ROLE DETECT            udos role detect"
            echo "UDOS ROLE INFO              udos role info"
            echo "UDOS VAR SET KEY=VALUE      udos var set KEY=VALUE"
            echo "UDOS VAR GET KEY            udos var get KEY"
            echo "UDOS VAR LIST               udos var list"
            echo "UDOS TPL LIST               udos tpl list"
            echo "UDOS TPL CREATE NAME        udos tpl create NAME"
            echo "UDOS DATA LIST              udos data list"
            echo "UDOS DATA BACKUP            udos data backup"
            echo "UDOS M3 WINDOW              udos m3 window"
            echo "UDOS M3 TEST                udos m3 test"
            echo "UDOS M4 WORKFLOW            udos m4 workflow"
            echo "UDOS M4 AI                  udos m4 ai"
            echo "UDOS M4 TEMPLATE            udos m4 template"
            echo "UDOS M4 NLP                 udos m4 nlp"
            echo "UDOS TEST [MODE]            udos test [system|m2|m3|quick]"
            echo "UDOS UPDATE                 udos update"
            echo "UDOS VERSION                udos version"
            echo "UDOS HELP [COMMAND]         udos help [command]"
            echo ""
            echo "${YELLOW}Wrapper Commands:${NC}"
            echo "UVAR SET/GET/LIST           uvar set/get/list"
            echo "UDATA LIST/BACKUP           udata list/backup"
            echo "UTPL LIST/CREATE            utpl list/create"
            echo ""
            echo "${CYAN}üí° Commands shown in CAPS, type in lowercase${NC}"
            echo "${CYAN}üí° For detailed help: UDOS HELP [command]${NC}"
            ;;
    esac
}

# Main command router
main() {
    case "${1:-}" in
        init)
            udos_init
            ;;
        info)
            udos_info
            ;;
        var|variable)
            shift
            udos_var "$@"
            ;;
        role)
            shift
            udos_role "$@"
            ;;
        tpl|template)
            shift
            udos_tpl "$@"
            ;;
        data)
            shift
            udos_data "$@"
            ;;
        m3|desktop)
            shift
            udos_m3 "$@"
            ;;
        m4|ai|automation)
            shift
            udos_m4 "$@"
            ;;
        test)
            shift
            udos_test "$@"
            ;;
        update)
            udos_update
            ;;
        help|--help|-h)
            shift
            udos_help "$@"
            ;;
        version|--version|-v)
            echo "uDOS $VERSION"
            ;;
        "")
            echo "${BLUE}uDOS v$VERSION${NC} - Universal Device Operating System"
            echo "TinyCore Linux Edition - Clean Architecture"
            echo ""
            echo "${CYAN}Quick Start:${NC}"
            echo "Display Format        Actual Command"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS INIT             udos init"
            echo "UDOS ROLE DETECT      udos role detect"
            echo "UDOS TEST             udos test"
            echo "UDOS HELP             udos help"
            echo ""
            echo "${YELLOW}üí° Commands shown in CAPS, type in lowercase${NC}"
            echo "${YELLOW}üí° Type UDOS HELP for complete command list${NC}"
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Type 'udos help' for available commands."
            return 1
            ;;
    esac
}

# Execute main function
main "$@"
