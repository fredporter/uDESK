#!/bin/sh
# uDOS Unified Command Interface v1.0.5
# Single entry point for all uDOS functionality on TinyCore Linux
# POSIX shell compatible

VERSION="1.0.5"
UDOS_HOME="${UDOS_HOME:-$HOME/.udos}"
UDOS_SYSTEM="/usr/local/share/udos"
UDOS_OPT="/opt/udos"

# Colors for output (POSIX compatible)
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    NC='\033[0m'
else
    RED='' GREEN='' BLUE='' YELLOW='' CYAN='' NC=''
fi

# Logging functions
log_info() { echo "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo "${RED}‚ùå $1${NC}"; }
log_warning() { echo "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

# ASCII Art Banner
show_banner() {
    cat << 'BANNER_EOF'

    ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    Universal Device Operating System v1.0.5
    TinyCore Linux Edition

BANNER_EOF
}

# Initialize uDOS environment
udos_init() {
    log_info "Initializing uDOS environment..."
    
    # Create user directories
    mkdir -p "${UDOS_HOME}/vars"
    mkdir -p "${UDOS_HOME}/data"
    mkdir -p "${UDOS_HOME}/templates"
    mkdir -p "${UDOS_HOME}/logs"
    mkdir -p "${UDOS_HOME}/projects"
    
    # Create config file
    cat > "${UDOS_HOME}/vars/config.env" << EOF
UDOS_VERSION=${VERSION}
USER_ROLE=TOMB
UDOS_GRID_SIZE=16
UDOS_INIT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
EOF
    
            # Set default role
            echo "TOMB" > "${UDOS_HOME}/vars/role"    log_success "uDOS environment initialized"
    log_info "Home directory: ${UDOS_HOME}"
}

# Variable management
udos_var() {
    case "${1:-}" in
        set)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos var set KEY=VALUE"
                return 1
            fi
            key=$(echo "$2" | cut -d'=' -f1)
            value=$(echo "$2" | cut -d'=' -f2-)
            mkdir -p "${UDOS_HOME}/vars"
            echo "$value" > "${UDOS_HOME}/vars/${key}"
            log_success "Set $key = $value"
            ;;
        get)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos var get KEY"
                return 1
            fi
            if [ -f "${UDOS_HOME}/vars/$2" ]; then
                cat "${UDOS_HOME}/vars/$2"
            else
                log_error "Variable $2 not found"
                return 1
            fi
            ;;
        list)
            echo "${BLUE}üìã uDOS Variables:${NC}"
            if [ -d "${UDOS_HOME}/vars" ]; then
                for var_file in "${UDOS_HOME}/vars"/*; do
                    if [ -f "$var_file" ]; then
                        var_name=$(basename "$var_file")
                        var_value=$(cat "$var_file")
                        echo "  $var_name = $var_value"
                    fi
                done
            else
                echo "  No variables set"
            fi
            ;;
        *)
            echo "${BLUE}uDOS Variable Management${NC}"
            echo "Display Format        Actual Command"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS VAR SET KEY=VAL  udos var set KEY=VALUE"
            echo "UDOS VAR GET KEY      udos var get KEY"
            echo "UDOS VAR LIST         udos var list"
            echo "UVAR SET KEY=VAL      uvar set KEY=VALUE"
            ;;
    esac
}

# Role detection and management
udos_role() {
    case "${1:-}" in
        detect)
            log_info "Detecting system capabilities..."
            
            role="TOMB"
            score=0
            
            # Check system capabilities
            [ -f "/usr/bin/gcc" ] && score=$((score + 10))
            [ -f "/usr/bin/git" ] && score=$((score + 5))
            [ -f "/usr/bin/vim" ] || [ -f "/usr/bin/nano" ] && score=$((score + 3))
            [ -f "/usr/bin/curl" ] && score=$((score + 2))
            [ -f "/usr/bin/wget" ] && score=$((score + 2))
            
            # Determine role based on score
            if [ $score -ge 20 ]; then
                role="WIZARD"
            elif [ $score -ge 15 ]; then
                role="SORCERER"
            elif [ $score -ge 12 ]; then
                role="KNIGHT"
            elif [ $score -ge 9 ]; then
                role="IMP"
            elif [ $score -ge 6 ]; then
                role="CRYPT"
            elif [ $score -ge 3 ]; then
                role="DRONE"
            elif [ $score -ge 1 ]; then
                role="TOMB"
            else
                role="GHOST"
            fi
            
            # Save role
            mkdir -p "${UDOS_HOME}/vars"
            echo "$role" > "${UDOS_HOME}/vars/role"
            echo "$score" > "${UDOS_HOME}/vars/role_score"
            
            echo "${GREEN}üé≠ Role Detected: $role${NC}"
            echo "Capability Score: $score"
            ;;
        info|show)
            if [ -f "${UDOS_HOME}/vars/role" ]; then
                role=$(cat "${UDOS_HOME}/vars/role")
                score=$(cat "${UDOS_HOME}/vars/role_score" 2>/dev/null || echo "Unknown")
                printf "${BLUE}üé≠ Current Role: %s${NC}\n" "$role"
                printf "Score: %s\n" "$score"
                printf "\nRole Hierarchy:\n"
                printf "  GHOST ‚Üí APPRENTICE ‚Üí SCRIBE ‚Üí SCHOLAR ‚Üí SAGE ‚Üí MASTER ‚Üí ARCHITECT ‚Üí WIZARD\n"
            else
                log_warning "No role detected. Run 'udos role detect' first."
            fi
            ;;
        *)
            printf "${BLUE}uDOS Role Management${NC}\n"
            printf "Display Format       Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS ROLE DETECT     udos role detect\n"
            printf "UDOS ROLE INFO       udos role info\n"
            printf "\n${YELLOW}Role Hierarchy:${NC}\n"
            printf "üëª GHOST ‚Üí ‚ö∞Ô∏è TOMB ‚Üí ü§ñ DRONE ‚Üí ÔøΩ CRYPT\n"
            printf "üòà IMP ‚Üí ‚öîÔ∏è KNIGHT ‚Üí üßô‚Äç‚ôÇÔ∏è SORCERER ‚Üí üßô‚Äç‚ôÄÔ∏è WIZARD\n"
            ;;
    esac
}

# Template management
udos_tpl() {
    case "${1:-}" in
        list)
            printf "${BLUE}üìÑ Available Templates:${NC}\n"
            if [ -d "${UDOS_SYSTEM}/templates" ]; then
                for tpl in "${UDOS_SYSTEM}/templates"/*.md; do
                    if [ -f "$tpl" ]; then
                        printf "  %s\n" "$(basename "$tpl" .md)"
                    fi
                done
            fi
            if [ -d "${UDOS_HOME}/templates" ]; then
                printf "\n${BLUE}üìÑ User Templates:${NC}\n"
                for tpl in "${UDOS_HOME}/templates"/*.md; do
                    if [ -f "$tpl" ]; then
                        printf "  %s (user)\n" "$(basename "$tpl" .md)"
                    fi
                done
            fi
            ;;
        create)
            if [ -z "${2:-}" ]; then
                log_error "Usage: udos tpl create TEMPLATE_NAME [OUTPUT_FILE]"
                return 1
            fi
            
            template_name="$2"
            output_file="${3:-${template_name}.md}"
            
            # Look for template
            template_file=""
            if [ -f "${UDOS_HOME}/templates/${template_name}.md" ]; then
                template_file="${UDOS_HOME}/templates/${template_name}.md"
            elif [ -f "${UDOS_SYSTEM}/templates/${template_name}.md" ]; then
                template_file="${UDOS_SYSTEM}/templates/${template_name}.md"
            else
                log_error "Template '$template_name' not found"
                return 1
            fi
            
            cp "$template_file" "$output_file"
            log_success "Created $output_file from template $template_name"
            ;;
        *)
            printf "${BLUE}uDOS Template Management${NC}\n"
            printf "Display Format         Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ         ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS TPL LIST          udos tpl list\n"
            printf "UDOS TPL CREATE NAME   udos tpl create NAME\n"
            printf "UTPL LIST              utpl list\n"
            printf "\n${YELLOW}Available Templates:${NC}\n"
            printf "  readme    Project README template\n"
            printf "  meeting   Meeting notes template\n"
            printf "  daily     Daily log template\n"
            ;;
    esac
}

# Data management
udos_data() {
    case "${1:-}" in
        list)
            printf "${BLUE}üìä uDOS Data Files:${NC}\n"
            if [ -d "${UDOS_HOME}/data" ]; then
                for data_file in "${UDOS_HOME}/data"/*; do
                    if [ -f "$data_file" ]; then
                        printf "  %s\n" "$(basename "$data_file")"
                    fi
                done
            else
                printf "  No data files found\n"
            fi
            ;;
        backup)
            backup_dir="${UDOS_HOME}/backups/$(date '+%Y%m%d_%H%M%S')"
            mkdir -p "$backup_dir"
            if [ -d "${UDOS_HOME}/data" ]; then
                cp -r "${UDOS_HOME}/data"/* "$backup_dir/" 2>/dev/null || true
                log_success "Data backed up to $backup_dir"
            else
                log_warning "No data directory to backup"
            fi
            ;;
        *)
            printf "${BLUE}uDOS Data Management${NC}\n"
            printf "Display Format      Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS DATA LIST      udos data list\n"
            printf "UDOS DATA BACKUP    udos data backup\n"
            printf "UDATA LIST          udata list\n"
            printf "UDATA BACKUP        udata backup\n"
            ;;
    esac
}

# System information
udos_info() {
    printf "${BLUE}üñ•Ô∏è  uDOS System Information${NC}\n"
    printf "Version: %s\n" "$VERSION"
    printf "Home: %s\n" "$UDOS_HOME"
    printf "System: %s\n" "$UDOS_SYSTEM"
    
    if [ -f "${UDOS_HOME}/vars/config.env" ]; then
        printf "Status: Initialized\n"
        if [ -f "${UDOS_HOME}/vars/role" ]; then
            printf "Role: %s\n" "$(cat "${UDOS_HOME}/vars/role")"
        fi
    else
        printf "Status: Not initialized (run 'udos init')\n"
    fi
    
    printf "\nSystem Resources:\n"
    printf "  Disk: %s\n" "$(df -h "$UDOS_HOME" 2>/dev/null | tail -1 | awk '{print $4 " available"}' || echo "Unknown")"
    printf "  Memory: %s\n" "$(free -h 2>/dev/null | grep Mem | awk '{print $7 " available"}' || echo "Unknown")"
}

# Update system
udos_update() {
    log_info "Checking for uDOS updates..."
    
    if command -v curl >/dev/null 2>&1; then
        log_info "Downloading latest installer..."
        curl -sSL "https://raw.githubusercontent.com/fredporter/uDESK/main/vm/current/install-udos-tinycore.sh" -o "/tmp/udos-update.sh"
        chmod +x "/tmp/udos-update.sh"
        log_info "Running update..."
        exec "/tmp/udos-update.sh"
    elif command -v wget >/dev/null 2>&1; then
        log_info "Downloading latest installer..."
        wget -q "https://raw.githubusercontent.com/fredporter/uDESK/main/vm/current/install-udos-tinycore.sh" -O "/tmp/udos-update.sh"
        chmod +x "/tmp/udos-update.sh"
        log_info "Running update..."
        exec "/tmp/udos-update.sh"
    else
        log_error "Neither curl nor wget available for updates"
        return 1
    fi
}

# Help system
udos_help() {
    case "${1:-}" in
        var|variable|variables)
            printf "${BLUE}uDOS Variable Management${NC}\n"
            printf "Display Format    Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS VAR SET      udos var set KEY=VALUE\n"
            printf "UDOS VAR GET      udos var get KEY\n"
            printf "UDOS VAR LIST     udos var list\n"
            printf "UVAR SET          uvar set KEY=VALUE\n"
            printf "UVAR GET          uvar get KEY\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos var set TEST=hello\n"
            printf "  uvar get TEST\n"
            printf "  udos var list\n"
            ;;
        role|roles)
            printf "${BLUE}uDOS Role Management${NC}\n"
            printf "Display Format       Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS ROLE DETECT     udos role detect\n"
            printf "UDOS ROLE INFO       udos role info\n"
            printf "\n${YELLOW}Role Hierarchy:${NC}\n"
            printf "üëª GHOST ‚Üí ‚ö∞Ô∏è TOMB ‚Üí ü§ñ DRONE ‚Üí ÔøΩ CRYPT\n"
            printf "üòà IMP ‚Üí ‚öîÔ∏è KNIGHT ‚Üí üßô‚Äç‚ôÇÔ∏è SORCERER ‚Üí üßô‚Äç‚ôÄÔ∏è WIZARD\n"
            ;;
        tpl|template|templates)
            printf "${BLUE}uDOS Template Management${NC}\n"
            printf "Display Format         Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ         ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS TPL LIST          udos tpl list\n"
            printf "UDOS TPL CREATE NAME   udos tpl create NAME\n"
            printf "UTPL LIST              utpl list\n"
            printf "\n${YELLOW}Examples:${NC}\n"
            printf "  udos tpl create readme\n"
            printf "  utpl list\n"
            ;;
        data)
            printf "${BLUE}uDOS Data Management${NC}\n"
            printf "Display Format      Actual Command\n"
            printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            printf "UDOS DATA LIST      udos data list\n"
            printf "UDOS DATA BACKUP    udos data backup\n"
            printf "UDATA LIST          udata list\n"
            ;;
        *)
            show_banner
            echo "${CYAN}Available Commands:${NC}"
            echo ""
            echo "${YELLOW}Display Format              Actual Command${NC}"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS INIT                   udos init"
            echo "UDOS INFO                   udos info"
            echo "UDOS ROLE DETECT            udos role detect"
            echo "UDOS ROLE INFO              udos role info"
            echo "UDOS VAR SET KEY=VALUE      udos var set KEY=VALUE"
            echo "UDOS VAR GET KEY            udos var get KEY"
            echo "UDOS VAR LIST               udos var list"
            echo "UDOS TPL LIST               udos tpl list"
            echo "UDOS TPL CREATE NAME        udos tpl create NAME"
            echo "UDOS DATA LIST              udos data list"
            echo "UDOS DATA BACKUP            udos data backup"
            echo "UDOS UPDATE                 udos update"
            echo "UDOS VERSION                udos version"
            echo "UDOS HELP [COMMAND]         udos help [command]"
            echo ""
            echo "${YELLOW}Wrapper Commands:${NC}"
            echo "UVAR SET/GET/LIST           uvar set/get/list"
            echo "UDATA LIST/BACKUP           udata list/backup"
            echo "UTPL LIST/CREATE            utpl list/create"
            echo ""
            echo "${CYAN}üí° Commands shown in CAPS, type in lowercase${NC}"
            echo "${CYAN}üí° For detailed help: UDOS HELP [command]${NC}"
            ;;
    esac
}

# Main command router
main() {
    case "${1:-}" in
        init)
            udos_init
            ;;
        info)
            udos_info
            ;;
        var|variable)
            shift
            udos_var "$@"
            ;;
        role)
            shift
            udos_role "$@"
            ;;
        tpl|template)
            shift
            udos_tpl "$@"
            ;;
        data)
            shift
            udos_data "$@"
            ;;
        update)
            udos_update
            ;;
        help|--help|-h)
            shift
            udos_help "$@"
            ;;
        version|--version|-v)
            echo "uDOS $VERSION"
            ;;
        "")
            echo "${BLUE}uDOS v$VERSION${NC} - Universal Device Operating System"
            echo "TinyCore Linux Edition - Clean Architecture"
            echo ""
            echo "${CYAN}Quick Start:${NC}"
            echo "Display Format        Actual Command"
            echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "UDOS INIT             udos init"
            echo "UDOS ROLE DETECT      udos role detect"
            echo "UDOS HELP             udos help"
            echo ""
            echo "${YELLOW}üí° Commands shown in CAPS, type in lowercase${NC}"
            echo "${YELLOW}üí° Type UDOS HELP for complete command list${NC}"
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Type 'udos help' for available commands."
            return 1
            ;;
    esac
}

# Execute main function
main "$@"
