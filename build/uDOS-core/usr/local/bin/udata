#!/bin/sh
# uDATA - uDOS Data Layer Management System
# Compatible with both sh and bash

# Check if we have bash, if not try to install it
if ! command -v bash >/dev/null 2>&1; then
    if command -v tce-load >/dev/null 2>&1; then
        echo "Installing bash for full compatibility..."
        tce-load -wi bash >/dev/null 2>&1 || true
    fi
fi

# Use bash if available, otherwise stick with sh
if command -v bash >/dev/null 2>&1; then
    # Re-execute with bash if we're still in sh
    if [ -z "$BASH_VERSION" ]; then
        exec bash "$0" "$@"
    fi
fi

UDOS_HOME="${HOME}/.udos"
DATA_DIR="${UDOS_HOME}/data"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Ensure data directory exists
mkdir -p "${DATA_DIR}"

# Save data to file
save_data() {
    local filename="$1"
    if [ -z "$filename" ]; then
        echo -e "${RED}‚ùå Filename required${NC}"
        return 1
    fi
    
    # Add .json extension if not present
    if [[ "$filename" != *.json ]] && [[ "$filename" != *.tsv ]] && [[ "$filename" != *.yaml ]]; then
        filename="${filename}.json"
    fi
    
    local filepath="${DATA_DIR}/${filename}"
    
    # Read from stdin or create empty structure
    if [ -t 0 ]; then
        # No input from pipe, create empty structure based on extension
        case "$filename" in
            *.json)
                echo '{}' > "$filepath"
                ;;
            *.tsv)
                echo -e "key\tvalue" > "$filepath"
                ;;
            *.yaml)
                echo '---' > "$filepath"
                ;;
        esac
    else
        # Read from stdin
        cat > "$filepath"
    fi
    
    echo -e "${GREEN}‚úÖ Data saved to ${filename}${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') SAVE ${filename}" >> "${UDOS_HOME}/logs/data.log"
}

# Load data from file
load_data() {
    local filename="$1"
    if [ -z "$filename" ]; then
        echo -e "${RED}‚ùå Filename required${NC}"
        return 1
    fi
    
    # Try with and without extension
    local filepath="${DATA_DIR}/${filename}"
    if [ ! -f "$filepath" ] && [[ "$filename" != *.* ]]; then
        # Try common extensions
        for ext in json tsv yaml; do
            if [ -f "${DATA_DIR}/${filename}.${ext}" ]; then
                filepath="${DATA_DIR}/${filename}.${ext}"
                break
            fi
        done
    fi
    
    if [ ! -f "$filepath" ]; then
        echo -e "${RED}‚ùå File not found: ${filename}${NC}"
        return 1
    fi
    
    cat "$filepath"
}

# List data files
list_data() {
    echo -e "${BLUE}üìä uDOS Data Files${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [ -d "$DATA_DIR" ] && [ "$(ls -A "$DATA_DIR" 2>/dev/null)" ]; then
        for file in "${DATA_DIR}"/*; do
            if [ -f "$file" ]; then
                local basename=$(basename "$file")
                local size=$(du -h "$file" | cut -f1)
                local modified=$(stat -c '%y' "$file" 2>/dev/null | cut -d' ' -f1 || stat -f '%Sm' -t '%Y-%m-%d' "$file")
                printf "  %-25s %8s %s\n" "$basename" "$size" "$modified"
            fi
        done
    else
        echo -e "${YELLOW}No data files found${NC}"
    fi
}

# Query JSON data (basic jq-like functionality)
query_data() {
    local filename="$1"
    local query="$2"
    
    if [ -z "$filename" ]; then
        echo -e "${RED}‚ùå Filename required${NC}"
        return 1
    fi
    
    local filepath="${DATA_DIR}/${filename}"
    if [[ "$filename" != *.* ]]; then
        filepath="${DATA_DIR}/${filename}.json"
    fi
    
    if [ ! -f "$filepath" ]; then
        echo -e "${RED}‚ùå File not found: ${filename}${NC}"
        return 1
    fi
    
    # Basic JSON querying without jq dependency
    if [ -z "$query" ]; then
        # Pretty print JSON
        python3 -m json.tool "$filepath" 2>/dev/null || cat "$filepath"
    else
        # Simple key extraction
        if command -v jq >/dev/null 2>&1; then
            jq "$query" "$filepath"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  jq not available, showing raw file${NC}"
            cat "$filepath"
        fi
    fi
}

# Delete data file
delete_data() {
    local filename="$1"
    if [ -z "$filename" ]; then
        echo -e "${RED}‚ùå Filename required${NC}"
        return 1
    fi
    
    local filepath="${DATA_DIR}/${filename}"
    if [ ! -f "$filepath" ] && [[ "$filename" != *.* ]]; then
        # Try common extensions
        for ext in json tsv yaml; do
            if [ -f "${DATA_DIR}/${filename}.${ext}" ]; then
                filepath="${DATA_DIR}/${filename}.${ext}"
                break
            fi
        done
    fi
    
    if [ ! -f "$filepath" ]; then
        echo -e "${RED}‚ùå File not found: ${filename}${NC}"
        return 1
    fi
    
    rm "$filepath"
    echo -e "${GREEN}‚úÖ Deleted ${filename}${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') DELETE ${filename}" >> "${UDOS_HOME}/logs/data.log"
}

# Main command dispatcher
case "$1" in
    save|write)
        shift
        save_data "$@"
        ;;
    load|read|cat)
        shift
        load_data "$@"
        ;;
    list|ls)
        list_data
        ;;
    query|q)
        shift
        query_data "$@"
        ;;
    delete|del|rm)
        shift
        delete_data "$@"
        ;;
    help|--help|-h)
        echo -e "${BLUE}uDATA - uDOS Data Layer Management${NC}"
        echo ""
        echo "Commands:"
        echo "  save FILE         Save data from stdin to file"
        echo "  load FILE         Load and display data file"
        echo "  list              List all data files"
        echo "  query FILE [Q]    Query JSON data (requires jq)"
        echo "  delete FILE       Delete data file"
        echo ""
        echo "Supported formats: .json, .tsv, .yaml"
        echo ""
        echo "Examples:"
        echo "  echo '{\"name\":\"test\"}' | udata save config"
        echo "  udata load config.json"
        echo "  udata query config '.name'"
        echo "  udata list"
        ;;
    *)
        if [ -n "$1" ]; then
            # Assume it's a load operation
            load_data "$1"
        else
            echo -e "${RED}‚ùå Command required. Use 'udata help' for usage${NC}"
            exit 1
        fi
        ;;
esac
