#!/bin/sh
# Main uDOS CLI - unified entry point for all uDOS functionality
# Compatible with both sh and bash

VERSION="1.0.0"
UDOS_HOME="${HOME}/.udos"
UDOS_SYSTEM="/usr/local/share/udos"

# Check if we have bash, if not try to install it
if ! command -v bash >/dev/null 2>&1; then
    if command -v tce-load >/dev/null 2>&1; then
        echo "Installing bash for full compatibility..."
        tce-load -wi bash >/dev/null 2>&1 || true
    fi
fi

# Use bash if available, otherwise stick with sh
if command -v bash >/dev/null 2>&1; then
    # Re-execute with bash if we're still in sh
    if [ -z "$BASH_VERSION" ]; then
        exec bash "$0" "$@"
    fi
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [udos] $1" >> "${UDOS_HOME}/logs/udos.log"
}

# Initialize uDOS structure
init_udos() {
    echo -e "${BLUE}üöÄ Initializing uDOS environment...${NC}"
    
    # Create directory structure
    mkdir -p "${UDOS_HOME}"/{vars,data,templates,logs,scripts}
    
    # Copy system templates if they don't exist
    if [ -d "${UDOS_SYSTEM}/templates" ] && [ ! -f "${UDOS_HOME}/templates/.initialized" ]; then
        cp -r "${UDOS_SYSTEM}/templates/"* "${UDOS_HOME}/templates/" 2>/dev/null || true
        touch "${UDOS_HOME}/templates/.initialized"
    fi
    
    # Detect user role
    echo -e "${CYAN}üé≠ Detecting user capabilities...${NC}"
    USER_ROLE=$(udos-detect-role --silent 2>/dev/null || echo "GHOST")
    
    # Create default config
    cat > "${UDOS_HOME}/vars/config.env" << EOF
# uDOS User Configuration
UDOS_VERSION=${VERSION}
UDOS_GRID_SIZE=16
UDOS_PALETTE=retro8
UDOS_EDITOR=micro
UDOS_VIEWER=glow
USER_ROLE=${USER_ROLE}
INITIALIZED=$(date)
EOF
    
    log "uDOS initialized for user ${USER} with role ${USER_ROLE}"
    echo -e "${GREEN}‚úÖ uDOS initialized at ${UDOS_HOME}${NC}"
    echo -e "${CYAN}üé≠ Detected role: ${USER_ROLE}${NC}"
    echo -e "${YELLOW}üí° Try: udos role info, udos var list, udos tpl list${NC}"
}

# Show system information
show_info() {
    echo -e "${BLUE}üìä uDOS System Information${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "Version: ${VERSION}"
    echo "User: ${USER} ($(id -u))"
    echo "Home: ${UDOS_HOME}"
    echo "System: ${UDOS_SYSTEM}"
    
    if [ -f "${UDOS_HOME}/vars/config.env" ]; then
        source "${UDOS_HOME}/vars/config.env"
        echo "Grid: ${UDOS_GRID_SIZE}√ó${UDOS_GRID_SIZE}"
        echo "Palette: ${UDOS_PALETTE}"
        echo "Editor: ${UDOS_EDITOR}"
    fi
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "Storage Usage:"
    du -sh "${UDOS_HOME}"/* 2>/dev/null | sed 's/^/  /'
}

# Clean up logs and cache
clean_udos() {
    echo -e "${YELLOW}üßπ Cleaning uDOS cache and logs...${NC}"
    
    # Clean old logs (keep last 7 days)
    find "${UDOS_HOME}/logs" -name "*.log" -mtime +7 -delete 2>/dev/null || true
    
    # Clean temporary data
    rm -rf "${UDOS_HOME}/data/.tmp" 2>/dev/null || true
    
    # Compress old data
    find "${UDOS_HOME}/data" -name "*.json" -mtime +30 -exec gzip {} \; 2>/dev/null || true
    
    log "Cleanup completed"
    echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
}

# Main command dispatcher
case "$1" in
    var|variable)
        shift
        uvar "$@"
        ;;
    data)
        shift
        udata "$@"
        ;;
    tpl|template)
        shift
        utpl "$@"
        ;;
    init|setup)
        init_udos
        ;;
    info|status)
        show_info
        ;;
    clean|cleanup)
        clean_udos
        ;;
    role)
        shift
        case "${1:-}" in
            detect|scan)
                udos-detect-role --force
                ;;
            info|show)
                if [ -f "${UDOS_HOME}/vars/role.env" ]; then
                    source "${UDOS_HOME}/vars/role.env"
                    echo -e "${BLUE}üé≠ Current uDOS Role:${NC}"
                    udos-detect-role --silent >/dev/null
                    echo
                    echo -e "${YELLOW}Role Details:${NC}"
                    echo "  Role: ${USER_ROLE}"
                    echo "  Score: ${USER_SCORE}"
                    echo "  Detected: ${ROLE_DETECTED_DATE}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  No role detected yet. Run 'udos role detect' first.${NC}"
                fi
                ;;
            upgrade|advance)
                echo -e "${BLUE}üöÄ Role Advancement Paths${NC}"
                echo
                if [ -f "${UDOS_HOME}/vars/role.env" ]; then
                    source "${UDOS_HOME}/vars/role.env"
                    echo -e "${YELLOW}Current Role: ${USER_ROLE} (Score: ${USER_SCORE})${NC}"
                    echo
                    echo -e "${CYAN}Next Role Requirements:${NC}"
                    case "$USER_ROLE" in
                        "GHOST")
                            echo "  üì¶ TOMB (Level 15): Learn file management, archives, basic scripting"
                            echo "     ‚Ä¢ Practice with tar, gzip, rsync"
                            echo "     ‚Ä¢ Write simple backup scripts"
                            echo "     ‚Ä¢ Organize file hierarchies"
                            ;;
                        "TOMB")
                            echo "  üîê CRYPT (Level 20): Master security and encryption"
                            echo "     ‚Ä¢ Set up GPG encryption"
                            echo "     ‚Ä¢ Configure SSH keys"
                            echo "     ‚Ä¢ Learn password management"
                            ;;
                        "CRYPT")
                            echo "  ü§ñ DRONE (Level 30): Automate repetitive tasks"
                            echo "     ‚Ä¢ Write shell scripts"
                            echo "     ‚Ä¢ Set up cron jobs"
                            echo "     ‚Ä¢ Learn basic Python/Node.js"
                            ;;
                        "DRONE")
                            echo "  ‚öîÔ∏è  KNIGHT (Level 40): Deploy and manage services"
                            echo "     ‚Ä¢ Learn Docker containers"
                            echo "     ‚Ä¢ Set up web servers"
                            echo "     ‚Ä¢ Monitor system processes"
                            ;;
                        "KNIGHT")
                            echo "  üëπ IMP (Level 60): Master networking and security"
                            echo "     ‚Ä¢ Network scanning with nmap"
                            echo "     ‚Ä¢ Firewall configuration"
                            echo "     ‚Ä¢ VPN setup and management"
                            ;;
                        "IMP")
                            echo "  üîÆ SORCERER (Level 80): Advanced automation and AI"
                            echo "     ‚Ä¢ Machine learning frameworks"
                            echo "     ‚Ä¢ Advanced automation with Ansible"
                            echo "     ‚Ä¢ API development and integration"
                            ;;
                        "SORCERER")
                            echo "  üßô WIZARD (Level 100): Architect complete systems"
                            echo "     ‚Ä¢ Infrastructure as code (Terraform)"
                            echo "     ‚Ä¢ Kubernetes orchestration"
                            echo "     ‚Ä¢ Multi-cloud deployment"
                            ;;
                        "WIZARD")
                            echo "  üéì You've mastered all roles! Consider:"
                            echo "     ‚Ä¢ Mentoring other users"
                            echo "     ‚Ä¢ Contributing to uDOS development"
                            echo "     ‚Ä¢ Teaching and documentation"
                            ;;
                    esac
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  No role detected. Run 'udos role detect' first.${NC}"
                fi
                ;;
            install|setup)
                echo -e "${BLUE}üõ†Ô∏è  Role-Specific Tool Installation${NC}"
                echo
                if [ -f "${UDOS_HOME}/vars/role.env" ]; then
                    source "${UDOS_HOME}/vars/role.env"
                    echo -e "${YELLOW}Installing tools for role: ${USER_ROLE}${NC}"
                    echo
                    case "$USER_ROLE" in
                        "GHOST")
                            echo "Installing basic tools..."
                            tce-load -wi nano htop curl git
                            ;;
                        "TOMB")
                            echo "Installing file management tools..."
                            tce-load -wi tar gzip unzip rsync tree
                            ;;
                        "CRYPT")
                            echo "Installing security tools..."
                            tce-load -wi gnupg openssh openssl
                            ;;
                        "DRONE")
                            echo "Installing automation tools..."
                            tce-load -wi python3 nodejs bash
                            ;;
                        "KNIGHT")
                            echo "Installing DevOps tools..."
                            echo "Note: Docker installation requires manual setup on TinyCore"
                            tce-load -wi nginx
                            ;;
                        *)
                            echo -e "${YELLOW}‚ö†Ô∏è  Advanced role tools require manual installation${NC}"
                            echo "See role documentation for installation guides."
                            ;;
                    esac
                    echo -e "${GREEN}‚úÖ Tool installation completed${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  No role detected. Run 'udos role detect' first.${NC}"
                fi
                ;;
            help|--help)
                echo -e "${BLUE}uDOS Role Management${NC}"
                echo
                echo "Commands:"
                echo "  detect       Analyze capabilities and detect role"
                echo "  info         Show current role information"
                echo "  upgrade      Show advancement paths"
                echo "  install      Install role-specific tools"
                echo "  help         Show this help"
                echo
                echo "Examples:"
                echo "  udos role detect"
                echo "  udos role info"
                echo "  udos role upgrade"
                ;;
            "")
                echo -e "${YELLOW}Role command requires subcommand. Use 'udos role help' for options.${NC}"
                ;;
            *)
                echo -e "${RED}‚ùå Unknown role command: $1${NC}"
                echo "Use 'udos role help' for available commands."
                exit 1
                ;;
        esac
        ;;
    help|--help|-h)
        echo -e "${BLUE}uDOS v${VERSION} - Universal Device Operating System${NC}"
        echo ""
        echo "Commands:"
        echo "  init          Initialize uDOS environment"
        echo "  var           Variable management (uvar)"
        echo "  data          Data layer operations (udata)"
        echo "  tpl           Template management (utpl)"
        echo "  role          Role detection and management"
        echo "  info          Show system information"
        echo "  clean         Clean logs and cache"
        echo "  help          Show this help"
        echo ""
        echo "Examples:"
        echo "  udos init"
        echo "  udos role detect"
        echo "  udos var set EDITOR=micro"
        echo "  udos tpl create document.md"
        echo "  udos data save notes.json"
        ;;
    version|--version|-v)
        echo "uDOS ${VERSION}"
        ;;
    *)
        if [ -z "$1" ]; then
            echo -e "${BLUE}uDOS v${VERSION}${NC} - Type 'udos help' for commands"
        else
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo "Type 'udos help' for available commands"
            exit 1
        fi
        ;;
esac
