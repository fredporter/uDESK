#!/bin/sh
# uTPL - uDOS Template System
# Compatible with both sh and bash

# Check if we have bash, if not try to install it
if ! command -v bash >/dev/null 2>&1; then
    if command -v tce-load >/dev/null 2>&1; then
        echo "Installing bash for full compatibility..."
        tce-load -wi bash >/dev/null 2>&1 || true
    fi
fi

# Use bash if available, otherwise stick with sh
if command -v bash >/dev/null 2>&1; then
    # Re-execute with bash if we're still in sh
    if [ -z "$BASH_VERSION" ]; then
        exec bash "$0" "$@"
    fi
fi

UDOS_HOME="${HOME}/.udos"
TEMPLATE_DIR="${UDOS_HOME}/templates"
SYSTEM_TPL="/usr/local/share/udos/templates"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Ensure templates directory exists
mkdir -p "${TPL_DIR}"

# List available templates
list_templates() {
    echo -e "${BLUE}üìù uDOS Templates${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # User templates
    if [ -d "$TPL_DIR" ] && [ "$(ls -A "$TPL_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}User Templates:${NC}"
        for tpl in "${TPL_DIR}"/*; do
            if [ -f "$tpl" ] && [[ "$(basename "$tpl")" != .* ]]; then
                local name=$(basename "$tpl")
                local size=$(du -h "$tpl" | cut -f1)
                printf "  %-25s %s\n" "$name" "$size"
            fi
        done
        echo ""
    fi
    
    # System templates
    if [ -d "$SYSTEM_TPL" ] && [ "$(ls -A "$SYSTEM_TPL" 2>/dev/null)" ]; then
        echo -e "${YELLOW}System Templates:${NC}"
        for tpl in "${SYSTEM_TPL}"/*; do
            if [ -f "$tpl" ]; then
                local name=$(basename "$tpl")
                local size=$(du -h "$tpl" | cut -f1)
                printf "  %-25s %s (system)\n" "$name" "$size"
            fi
        done
    fi
}

# Create new file from template
create_from_template() {
    local template="$1"
    local output="$2"
    
    if [ -z "$template" ]; then
        echo -e "${RED}‚ùå Template name required${NC}"
        return 1
    fi
    
    # Find template file
    local tpl_file=""
    if [ -f "${TPL_DIR}/${template}" ]; then
        tpl_file="${TPL_DIR}/${template}"
    elif [ -f "${SYSTEM_TPL}/${template}" ]; then
        tpl_file="${SYSTEM_TPL}/${template}"
    elif [ -f "$template" ]; then
        tpl_file="$template"
    else
        echo -e "${RED}‚ùå Template not found: ${template}${NC}"
        return 1
    fi
    
    # Determine output filename
    if [ -z "$output" ]; then
        output="$(basename "$template" .tpl)"
        if [ "$output" = "$template" ]; then
            output="new-${template}"
        fi
    fi
    
    # Check if output file exists
    if [ -f "$output" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  File exists: ${output}${NC}"
        read -p "Overwrite? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Cancelled"
            return 1
        fi
    fi
    
    # Process template with variable substitution
    process_template "$tpl_file" "$output"
    
    echo -e "${GREEN}‚úÖ Created ${output} from template ${template}${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') CREATE ${output} from ${template}" >> "${UDOS_HOME}/logs/templates.log"
}

# Process template with variable substitution
process_template() {
    local input_file="$1"
    local output_file="$2"
    
    # Load variables from uvar
    local vars_env="${UDOS_HOME}/vars/config.env"
    
    # Create temporary processing script
    local temp_script="/tmp/utpl_process_$$"
    cat > "$temp_script" << 'EOF'
#!/bin/bash
# Load variables if available
if [ -f "${UDOS_HOME}/vars/config.env" ]; then
    source "${UDOS_HOME}/vars/config.env"
fi

# Set default variables
export DATE=$(date '+%Y-%m-%d')
export DATETIME=$(date '+%Y-%m-%d %H:%M:%S')
export USER=${USER:-$(whoami)}
export YEAR=$(date '+%Y')

# Process template
envsubst < "$1" > "$2"
EOF
    
    chmod +x "$temp_script"
    UDOS_HOME="$UDOS_HOME" "$temp_script" "$input_file" "$output_file"
    rm "$temp_script"
}

# Show template content
show_template() {
    local template="$1"
    
    if [ -z "$template" ]; then
        echo -e "${RED}‚ùå Template name required${NC}"
        return 1
    fi
    
    # Find template file
    local tpl_file=""
    if [ -f "${TPL_DIR}/${template}" ]; then
        tpl_file="${TPL_DIR}/${template}"
    elif [ -f "${SYSTEM_TPL}/${template}" ]; then
        tpl_file="${SYSTEM_TPL}/${template}"
    elif [ -f "$template" ]; then
        tpl_file="$template"
    else
        echo -e "${RED}‚ùå Template not found: ${template}${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üìÑ Template: ${template}${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    cat "$tpl_file"
}

# Install template from file
install_template() {
    local source="$1"
    local name="$2"
    
    if [ -z "$source" ]; then
        echo -e "${RED}‚ùå Source file required${NC}"
        return 1
    fi
    
    if [ ! -f "$source" ]; then
        echo -e "${RED}‚ùå Source file not found: ${source}${NC}"
        return 1
    fi
    
    if [ -z "$name" ]; then
        name=$(basename "$source")
    fi
    
    cp "$source" "${TPL_DIR}/${name}"
    echo -e "${GREEN}‚úÖ Template installed: ${name}${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') INSTALL ${name}" >> "${UDOS_HOME}/logs/templates.log"
}

# Main command dispatcher
case "$1" in
    list|ls)
        list_templates
        ;;
    create|new)
        shift
        create_from_template "$@"
        ;;
    show|cat)
        shift
        show_template "$@"
        ;;
    install)
        shift
        install_template "$@"
        ;;
    help|--help|-h)
        echo -e "${BLUE}uTPL - uDOS Template Management${NC}"
        echo ""
        echo "Commands:"
        echo "  list              List available templates"
        echo "  create TPL [OUT]  Create file from template"
        echo "  show TPL          Show template content"
        echo "  install FILE [N]  Install template from file"
        echo ""
        echo "Variable substitution:"
        echo "  \$USER, \$DATE, \$DATETIME, \$YEAR"
        echo "  Any variable from 'uvar list'"
        echo ""
        echo "Examples:"
        echo "  utpl list"
        echo "  utpl create document.md.tpl my-doc.md"
        echo "  utpl show document.md.tpl"
        ;;
    *)
        if [ -n "$1" ]; then
            # Assume it's a create operation
            create_from_template "$1" "$2"
        else
            echo -e "${RED}‚ùå Command required. Use 'utpl help' for usage${NC}"
            exit 1
        fi
        ;;
esac
