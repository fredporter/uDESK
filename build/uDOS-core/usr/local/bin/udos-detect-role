#!/bin/sh
# udos-detect-role - Analyze user capabilities and assign uDOS role
# Part of uDOS M2 role hierarchy system

VERSION="1.0.0"
UDOS_HOME="${HOME}/.udos"

# Check if we have bash, if not try to install it
if ! which bash >/dev/null 2>&1; then
    if which tce-load >/dev/null 2>&1; then
        tce-load -wi bash >/dev/null 2>&1 || true
    fi
fi

# Use bash if available, otherwise stick with sh
if which bash >/dev/null 2>&1; then
    # Re-execute with bash if we're still in sh
    if [ -z "$BASH_VERSION" ]; then
        exec bash "$0" "$@"
    fi
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Role definitions with scores
ROLE_GHOST=10
ROLE_TOMB=15
ROLE_CRYPT=20
ROLE_DRONE=30
ROLE_KNIGHT=40
ROLE_IMP=60
ROLE_SORCERER=80
ROLE_WIZARD=100

# Detect user capabilities and calculate score
detect_user_capabilities() {
    local score=$ROLE_GHOST  # Start with GHOST baseline
    local details=""
    
    echo -e "${BLUE}🔍 Analyzing user capabilities...${NC}" >&2
    
    # Basic text editing capabilities
    if [ -f ~/.vimrc ] || [ -f ~/.emacs ] || [ -f ~/.nanorc ]; then
        score=$((score + 2))
        details="${details}\n  ✓ Advanced text editor configuration found (+2)"
    fi
    
    # Programming language files
    if find ~ -maxdepth 3 -name "*.py" -o -name "*.js" -o -name "*.sh" -o -name "*.go" -o -name "*.rs" 2>/dev/null | head -1 | grep -q .; then
        score=$((score + 5))
        details="${details}\n  ✓ Programming files detected (+5)"
    fi
    
    # Shell scripting proficiency
    if [ -d ~/bin ] && [ "$(find ~/bin -type f -executable 2>/dev/null | wc -l)" -gt 0 ]; then
        score=$((score + 5))
        details="${details}\n  ✓ Custom scripts in ~/bin (+5)"
    fi
    
    # Automation capabilities
    if crontab -l 2>/dev/null | grep -q .; then
        score=$((score + 10))
        details="${details}\n  ✓ Cron jobs configured (+10)"
    fi
    
    # Version control usage
    if [ -d ~/.git ] || find ~ -maxdepth 2 -name ".git" -type d 2>/dev/null | head -1 | grep -q .; then
        score=$((score + 3))
        details="${details}\n  ✓ Git repositories found (+3)"
    fi
    
    # Security consciousness
    if which gpg >/dev/null 2>&1; then
        score=$((score + 5))
        details="${details}\n  ✓ GPG encryption available (+5)"
    fi
    
    if [ -d ~/.ssh ] && [ -f ~/.ssh/config ]; then
        score=$((score + 5))
        details="${details}\n  ✓ SSH configuration found (+5)"
    fi
    
    # Development environment
    if which python3 >/dev/null 2>&1; then
        score=$((score + 5))
        details="${details}\n  ✓ Python 3 available (+5)"
    fi
    
    if which node >/dev/null 2>&1; then
        score=$((score + 5))
        details="${details}\n  ✓ Node.js available (+5)"
    fi
    
    # DevOps capabilities
    if which docker >/dev/null 2>&1; then
        score=$((score + 15))
        details="${details}\n  ✓ Docker available (+15)"
    fi
    
    if systemctl --user list-units 2>/dev/null | grep -q .; then
        score=$((score + 10))
        details="${details}\n  ✓ Systemd user services (+10)"
    fi
    
    # Network administration
    if which nmap >/dev/null 2>&1; then
        score=$((score + 10))
        details="${details}\n  ✓ Network scanning tools (+10)"
    fi
    
    if which iptables >/dev/null 2>&1; then
        score=$((score + 10))
        details="${details}\n  ✓ Firewall management tools (+10)"
    fi
    
    # Advanced automation
    if which ansible >/dev/null 2>&1; then
        score=$((score + 20))
        details="${details}\n  ✓ Ansible automation (+20)"
    fi
    
    # Infrastructure as Code
    if which terraform >/dev/null 2>&1; then
        score=$((score + 30))
        details="${details}\n  ✓ Terraform infrastructure (+30)"
    fi
    
    if which kubectl >/dev/null 2>&1; then
        score=$((score + 25))
        details="${details}\n  ✓ Kubernetes tools (+25)"
    fi
    
    # Database administration
    if which psql >/dev/null 2>&1 || which mysql >/dev/null 2>&1; then
        score=$((score + 8))
        details="${details}\n  ✓ Database tools available (+8)"
    fi
    
    # Advanced development patterns
    if [ -f package.json ] || [ -f requirements.txt ] || [ -f Cargo.toml ] || [ -f go.mod ]; then
        score=$((score + 8))
        details="${details}\n  ✓ Modern project structure (+8)"
    fi
    
    # Output detailed analysis (to stderr so score goes to stdout)
    echo -e "${CYAN}Analysis Results:${NC}" >&2
    echo -e "$details" >&2
    echo >&2
    echo -e "${YELLOW}Total Capability Score: ${score}${NC}" >&2
    
    echo "$score"
}

# Convert score to role
score_to_role() {
    local score="$1"
    
    if [ "$score" -ge $ROLE_WIZARD ]; then
        echo "WIZARD"
    elif [ "$score" -ge $ROLE_SORCERER ]; then
        echo "SORCERER"
    elif [ "$score" -ge $ROLE_IMP ]; then
        echo "IMP"
    elif [ "$score" -ge $ROLE_KNIGHT ]; then
        echo "KNIGHT"
    elif [ "$score" -ge $ROLE_DRONE ]; then
        echo "DRONE"
    elif [ "$score" -ge $ROLE_CRYPT ]; then
        echo "CRYPT"
    elif [ "$score" -ge $ROLE_TOMB ]; then
        echo "TOMB"
    else
        echo "GHOST"
    fi
}

# Get role description and color
get_role_info() {
    local role="$1"
    
    case "$role" in
        "WIZARD")
            echo -e "${PURPLE}🧙 WIZARD (Level 100)${NC} - Full System Architect"
            echo "   Complete infrastructure design and multi-cloud deployment"
            ;;
        "SORCERER")
            echo -e "${PURPLE}🔮 SORCERER (Level 80)${NC} - Advanced Automation & AI"
            echo "   Machine learning, advanced automation, and API development"
            ;;
        "IMP")
            echo -e "${RED}👹 IMP (Level 60)${NC} - Network & Security Specialist"
            echo "   Advanced networking, security scanning, and penetration testing"
            ;;
        "KNIGHT")
            echo -e "${BLUE}⚔️  KNIGHT (Level 40)${NC} - DevOps & Deployment Expert"
            echo "   Container management, service deployment, and monitoring"
            ;;
        "DRONE")
            echo -e "${CYAN}🤖 DRONE (Level 30)${NC} - Basic Automation Worker"
            echo "   Shell scripting, cron jobs, and basic programming"
            ;;
        "CRYPT")
            echo -e "${YELLOW}🔐 CRYPT (Level 20)${NC} - Data & Security Handler"
            echo "   File encryption, password management, and secure transfers"
            ;;
        "TOMB")
            echo -e "${GREEN}📦 TOMB (Level 15)${NC} - File & Storage Manager"
            echo "   Advanced file operations, archives, and storage management"
            ;;
        "GHOST")
            echo -e "${NC}👻 GHOST (Level 10)${NC} - Basic CLI User"
            echo "   Basic file operations, simple editing, and uDOS CLI tools"
            ;;
    esac
}

# Save role to user config
save_user_role() {
    local role="$1"
    local score="$2"
    
    mkdir -p "$UDOS_HOME/vars"
    cat > "$UDOS_HOME/vars/role.env" << EOF
# uDOS User Role Configuration
USER_ROLE=$role
USER_SCORE=$score
ROLE_DETECTED_DATE=$(date '+%Y-%m-%d %H:%M:%S')
UDOS_VERSION=$VERSION
EOF
    
    # Also update main config
    if [ -f "$UDOS_HOME/vars/config.env" ]; then
        if grep -q "USER_ROLE=" "$UDOS_HOME/vars/config.env"; then
            sed -i "s/USER_ROLE=.*/USER_ROLE=$role/" "$UDOS_HOME/vars/config.env"
        else
            echo "USER_ROLE=$role" >> "$UDOS_HOME/vars/config.env"
        fi
    fi
}

# Main detection function
run_detection() {
    echo -e "${BLUE}🎭 uDOS Role Detection System v${VERSION}${NC}" >&2
    echo >&2
    
    local score=$(detect_user_capabilities)
    local role=$(score_to_role "$score")
    
    echo >&2
    echo -e "${GREEN}🎯 Detected Role:${NC}" >&2
    get_role_info "$role" >&2
    echo >&2
    
    # Save role
    save_user_role "$role" "$score"
    
    echo -e "${GREEN}✅ Role configuration saved to ${UDOS_HOME}/vars/role.env${NC}" >&2
    echo >&2
    echo -e "${YELLOW}💡 Next steps:${NC}" >&2
    echo "   • Run 'udos role info' to see your role details" >&2
    echo "   • Run 'udos role upgrade' to see advancement paths" >&2
    echo "   • Run 'udos role install' to add role-specific tools" >&2
    
    # Return role name to stdout
    echo "$role"
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        echo -e "${BLUE}udos-detect-role - uDOS Role Detection System${NC}"
        echo
        echo "Usage: $0 [OPTIONS]"
        echo
        echo "Options:"
        echo "  -h, --help     Show this help message"
        echo "  -v, --version  Show version information"
        echo "  -f, --force    Force re-detection (ignore cached results)"
        echo "  -s, --silent   Run silently, only output role name"
        exit 0
        ;;
    -v|--version)
        echo "udos-detect-role v${VERSION}"
        exit 0
        ;;
    -s|--silent)
        score=$(detect_user_capabilities 2>/dev/null)
        role=$(score_to_role "$score")
        echo "$role"
        exit 0
        ;;
    -f|--force)
        run_detection
        ;;
    "")
        # Check if role already detected and recent
        if [ -f "$UDOS_HOME/vars/role.env" ] && [ -z "${FORCE_REDETECT:-}" ]; then
            echo -e "${YELLOW}Role already detected. Use --force to re-detect.${NC}" >&2
            echo -e "${BLUE}Current role:${NC}" >&2
            source "$UDOS_HOME/vars/role.env"
            get_role_info "$USER_ROLE" >&2
            echo "$USER_ROLE"
        else
            run_detection
        fi
        ;;
    *)
        echo -e "${RED}❌ Unknown option: $1${NC}" >&2
        echo "Use '$0 --help' for usage information." >&2
        exit 1
        ;;
esac
