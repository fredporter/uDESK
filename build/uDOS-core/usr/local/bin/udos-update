#!/bin/sh
# udos-update - Update uDOS from GitHub repository
# TinyCore-specific self-updating system

VERSION="1.0.0"
GITHUB_RAW="https://raw.githubusercontent.com/fredporter/uDESK/main/build/uDOS-core/usr/local/bin"
GITHUB_TEMPLATE="https://raw.githubusercontent.com/fredporter/uDESK/main/build/uDOS-core/usr/local/share/udos/templates"
UDOS_HOME="${HOME}/.udos"

# Check if we have bash, if not try to install it
if ! which bash >/dev/null 2>&1; then
    if which tce-load >/dev/null 2>&1; then
        tce-load -wi bash >/dev/null 2>&1 || true
    fi
fi

# Use bash if available, otherwise stick with sh
if which bash >/dev/null 2>&1; then
    # Re-execute with bash if we're still in sh
    if [ -z "$BASH_VERSION" ]; then
        exec bash "$0" "$@"
    fi
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Log function
log() {
    mkdir -p "${UDOS_HOME}/logs"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [udos-update] $1" >> "${UDOS_HOME}/logs/udos.log"
}

# Check internet connectivity
check_internet() {
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo -e "${RED}‚ùå No internet connection${NC}"
        exit 1
    fi
}

# Backup current installation
backup_current() {
    local backup_dir="/tmp/udos-backup-$(date +%Y%m%d-%H%M%S)"
    echo -e "${YELLOW}üì¶ Creating backup at ${backup_dir}${NC}"
    
    mkdir -p "$backup_dir"
    cp /usr/local/bin/udos* "$backup_dir/" 2>/dev/null || true
    cp -r /usr/local/share/udos "$backup_dir/" 2>/dev/null || true
    
    echo "$backup_dir" > /tmp/udos-last-backup
    log "Backup created at $backup_dir"
    echo -e "${GREEN}‚úÖ Backup completed${NC}"
}

# Download and install updates
update_core_files() {
    echo -e "${BLUE}üì• Downloading uDOS updates...${NC}"
    
    local files="udos uvar udata utpl udos-detect-role udos-update"
    local updated=0
    
    for file in $files; do
        echo "Updating $file..."
        if curl -sL "${GITHUB_RAW}/$file" | sudo tee "/usr/local/bin/$file" > /dev/null; then
            sudo chmod +x "/usr/local/bin/$file"
            updated=$((updated + 1))
            log "Updated $file"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Failed to update $file${NC}"
        fi
    done
    
    # Update templates
    echo "Updating templates..."
    sudo mkdir -p /usr/local/share/udos/templates
    if curl -sL "${GITHUB_TEMPLATE}/document.md" | sudo tee "/usr/local/share/udos/templates/document.md" > /dev/null; then
        log "Updated document.md template"
    fi
    
    echo -e "${GREEN}‚úÖ Updated $updated core files${NC}"
}

# Check for updates without installing
check_updates() {
    echo -e "${BLUE}üîç Checking for updates...${NC}"
    
    # Get remote version
    local remote_version=$(curl -s "${GITHUB_RAW}/udos" | grep "VERSION=" | head -1 | cut -d'"' -f2)
    local local_version=$(grep "VERSION=" /usr/local/bin/udos | head -1 | cut -d'"' -f2)
    
    echo "Local version:  $local_version"
    echo "Remote version: $remote_version"
    
    if [ "$remote_version" != "$local_version" ]; then
        echo -e "${YELLOW}üÜï Updates available!${NC}"
        return 0
    else
        echo -e "${GREEN}‚úÖ You have the latest version${NC}"
        return 1
    fi
}

# Rollback to previous version
rollback() {
    if [ -f /tmp/udos-last-backup ]; then
        local backup_dir=$(cat /tmp/udos-last-backup)
        if [ -d "$backup_dir" ]; then
            echo -e "${YELLOW}‚è™ Rolling back to backup...${NC}"
            sudo cp "$backup_dir"/udos* /usr/local/bin/ 2>/dev/null || true
            sudo cp -r "$backup_dir/udos" /usr/local/share/ 2>/dev/null || true
            sudo chmod +x /usr/local/bin/udos*
            echo -e "${GREEN}‚úÖ Rollback completed${NC}"
            log "Rolled back from $backup_dir"
        else
            echo -e "${RED}‚ùå Backup directory not found: $backup_dir${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå No backup found${NC}"
        exit 1
    fi
}

# Update TinyCore persistence
update_persistence() {
    echo -e "${CYAN}üíæ Updating TinyCore persistence...${NC}"
    
    if [ -f /opt/.filetool.lst ]; then
        # Ensure uDOS files are in persistence list
        local files="usr/local/bin/udos usr/local/bin/uvar usr/local/bin/udata usr/local/bin/utpl usr/local/bin/udos-detect-role usr/local/bin/udos-update usr/local/share/udos home/tc/.udos"
        
        for file in $files; do
            if ! grep -qxF "$file" /opt/.filetool.lst; then
                echo "$file" >> /opt/.filetool.lst
                echo "Added $file to persistence"
            fi
        done
        
        echo -e "${GREEN}‚úÖ Persistence updated${NC}"
        echo -e "${YELLOW}üí° Run 'filetool.sh -b' to save changes${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  TinyCore persistence not available${NC}"
    fi
}

# Main update function
run_update() {
    echo -e "${BLUE}üöÄ uDOS Update System v${VERSION}${NC}"
    echo
    
    check_internet
    backup_current
    update_core_files
    update_persistence
    
    echo
    echo -e "${GREEN}üéâ uDOS update completed successfully!${NC}"
    echo -e "${YELLOW}üí° Restart your terminal or run 'source ~/.bashrc' to use updated commands${NC}"
    
    log "Update completed successfully"
}

# Show help
show_help() {
    echo -e "${BLUE}udos-update - uDOS Update System${NC}"
    echo
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  update        Download and install updates (default)"
    echo "  check         Check for available updates"
    echo "  rollback      Rollback to previous version"
    echo "  backup        Create backup of current installation"
    echo "  help          Show this help message"
    echo
    echo "Examples:"
    echo "  $0              # Update uDOS"
    echo "  $0 check        # Check for updates"
    echo "  $0 rollback     # Rollback if issues"
    echo
    echo "TinyCore Specific:"
    echo "  ‚Ä¢ Automatically updates persistence list"
    echo "  ‚Ä¢ Creates backups before updating"
    echo "  ‚Ä¢ Works with TinyCore's file system"
}

# Parse command line arguments
case "${1:-update}" in
    update|install)
        run_update
        ;;
    check)
        check_updates
        ;;
    rollback|revert)
        rollback
        ;;
    backup)
        backup_current
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo "Use '$0 help' for available commands."
        exit 1
        ;;
esac
